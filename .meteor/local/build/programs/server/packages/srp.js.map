{"version":3,"file":"\\packages\\srp.js","sources":["srp/biginteger.js","srp/sha256.js","srp/srp.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,kB;AACA,2B;;;AAGA,iB;;AAEA,E;AACA,kC;AACA,uB;AACA,E;AACA,wE;AACA,kE;AACA,sE;AACA,sE;AACA,qE;AACA,wE;AACA,4B;AACA,E;AACA,iE;AACA,kE;AACA,E;AACA,sE;AACA,oE;AACA,qE;AACA,E;AACA,kE;AACA,2E;AACA,yE;AACA,yE;AACA,oE;AACA,E;AACA,gD;AACA,E;AACA,0E;AACA,kB;AACA,G;;AAEA,kE;;AAEA,iB;AACA,U;;AAEA,6B;AACA,4B;AACA,yC;;AAEA,uB;AACA,4B;AACA,e;AACA,oD;AACA,sE;AACA,8B;AACA,C;;AAEA,+B;AACA,+C;;AAEA,oD;AACA,2C;AACA,8C;AACA,oE;;AAEA,0D;AACA,sC;AACA,oD;AACA,2B;AACA,mB;AACA,+B;AACA,gC;AACA,yB;AACA,G;AACA,W;AACA,C;AACA,gD;AACA,2D;AACA,iD;AACA,2B;AACA,gC;AACA,mB;AACA,2B;AACA,0B;AACA,sB;AACA,kD;AACA,wC;AACA,0B;AACA,G;AACA,W;AACA,C;AACA,mD;AACA,uD;AACA,2B;AACA,gC;AACA,mB;AACA,2B;AACA,0B;AACA,sB;AACA,qC;AACA,6B;AACA,yB;AACA,G;AACA,W;AACA,C;;AAEA,iB;AACA,kE;AACA,gC;AACA,a;AACA,C;AACA,oD;AACA,gC;AACA,a;AACA,C;AACA,K;AACA,E;;AAEA,yC;AACA,gC;AACA,a;AACA,C;;AAEA,gC;AACA,yC;AACA,qC;;AAEA,e;AACA,4C;AACA,sC;AACA,wC;;AAEA,oB;AACA,mD;AACA,wB;AACA,U;AACA,uB;AACA,4C;AACA,uB;AACA,6C;AACA,uB;AACA,6C;;AAEA,gD;AACA,qB;AACA,iC;AACA,wB;AACA,C;;AAEA,6B;AACA,uB;AACA,oD;AACA,e;AACA,e;AACA,C;;AAEA,sD;AACA,wB;AACA,a;AACA,sB;AACA,wB;AACA,iC;AACA,kB;AACA,C;;AAEA,qC;AACA,0D;;AAEA,wC;AACA,6B;AACA,Q;AACA,oB;AACA,wB;AACA,wC;AACA,wB;AACA,yB;AACA,wB;AACA,uC;AACA,a;AACA,a;AACA,uC;AACA,mB;AACA,wC;AACA,e;AACA,uC;AACA,e;AACA,K;AACA,e;AACA,e;AACA,yB;AACA,6B;AACA,sD;AACA,yC;AACA,K;AACA,Q;AACA,8B;AACA,Y;AACA,oC;AACA,G;AACA,kC;AACA,gB;AACA,2D;AACA,G;AACA,e;AACA,0C;AACA,C;;AAEA,0C;AACA,qB;AACA,yB;AACA,oD;AACA,C;;AAEA,uD;AACA,wB;AACA,sD;AACA,Q;AACA,oB;AACA,wB;AACA,wB;AACA,yB;AACA,wB;AACA,8B;AACA,sD;AACA,gC;AACA,e;AACA,0E;AACA,mB;AACA,iB;AACA,wC;AACA,uC;AACA,O;AACA,Y;AACA,iC;AACA,yC;AACA,O;AACA,yB;AACA,6B;AACA,K;AACA,G;AACA,iB;AACA,C;;AAEA,iB;AACA,+E;;AAEA,kB;AACA,0D;;AAEA,2D;AACA,yB;AACA,qB;AACA,sB;AACA,iB;AACA,Y;AACA,sB;AACA,qD;AACA,W;AACA,C;;AAEA,sC;AACA,mB;AACA,e;AACA,yC;AACA,sC;AACA,sC;AACA,sC;AACA,sC;AACA,W;AACA,C;;AAEA,+C;AACA,wB;AACA,2B;AACA,mE;AACA,C;;AAEA,+B;AACA,4B;AACA,Q;AACA,kD;AACA,qC;AACA,iB;AACA,e;AACA,C;;AAEA,+B;AACA,4B;AACA,mD;AACA,6B;AACA,e;AACA,C;;AAEA,4B;AACA,2B;AACA,qB;AACA,uB;AACA,sB;AACA,8D;AACA,kC;AACA,iC;AACA,yB;AACA,G;AACA,sC;AACA,Y;AACA,oB;AACA,e;AACA,Y;AACA,C;;AAEA,4B;AACA,2B;AACA,e;AACA,iC;AACA,uC;AACA,qB;AACA,uB;AACA,qB;AACA,sB;AACA,sC;AACA,mC;AACA,0B;AACA,G;AACA,gD;AACA,kB;AACA,Y;AACA,C;;AAEA,2B;AACA,wB;AACA,6C;AACA,gB;AACA,sB;AACA,uB;AACA,kB;AACA,G;AACA,oB;AACA,a;AACA,uB;AACA,mB;AACA,yB;AACA,oB;AACA,K;AACA,gB;AACA,G;AACA,Q;AACA,gB;AACA,oB;AACA,gB;AACA,yB;AACA,oB;AACA,K;AACA,a;AACA,G;AACA,mB;AACA,gC;AACA,4B;AACA,U;AACA,Y;AACA,C;;AAEA,oD;AACA,kD;AACA,6B;AACA,kC;AACA,c;AACA,c;AACA,2B;AACA,6D;AACA,U;AACA,Y;AACA,+C;AACA,C;;AAEA,gD;AACA,yB;AACA,qB;AACA,sB;AACA,2B;AACA,8B;AACA,mC;AACA,gE;AACA,uB;AACA,qB;AACA,K;AACA,G;AACA,iD;AACA,U;AACA,Y;AACA,C;;AAEA,2E;AACA,0C;AACA,6B;AACA,mB;AACA,uB;AACA,sB;AACA,mB;AACA,+B;AACA,iC;AACA,W;AACA,G;AACA,0B;AACA,uC;AACA,2D;AACA,yD;AACA,sC;AACA,e;AACA,mB;AACA,qB;AACA,uD;AACA,4D;AACA,+C;AACA,mB;AACA,2B;AACA,iB;AACA,iB;AACA,G;AACA,iC;AACA,mE;AACA,+B;AACA,mB;AACA,8B;AACA,oE;AACA,wD;AACA,uB;AACA,mB;AACA,sC;AACA,K;AACA,G;AACA,iB;AACA,sB;AACA,4C;AACA,G;AACA,W;AACA,Y;AACA,yD;AACA,wC;AACA,C;;AAEA,sB;AACA,mB;AACA,gB;AACA,gC;AACA,kE;AACA,W;AACA,C;;AAEA,8C;AACA,mC;AACA,sB;AACA,+D;AACA,gB;AACA,C;AACA,iC;AACA,kD;AACA,6D;AACA,uD;;AAEA,qC;AACA,mC;AACA,mC;AACA,iC;AACA,iC;;AAEA,kE;AACA,iB;AACA,0B;AACA,qB;AACA,4B;AACA,wB;AACA,4B;AACA,iD;AACA,wE;AACA,0E;AACA,wB;AACA,0B;AACA,kB;AACA,0B;AACA,mC;AACA,gD;AACA,kD;AACA,kE;AACA,mD;AACA,oE;AACA,2D;AACA,0D;AACA,4B;AACA,C;;AAEA,uB;AACA,wB;AACA,a;AACA,yB;AACA,4B;AACA,yB;AACA,6B;AACA,mB;AACA,C;;AAEA,W;AACA,yB;AACA,gB;AACA,gC;AACA,4B;AACA,oE;AACA,W;AACA,C;;AAEA,Y;AACA,wB;AACA,gB;AACA,c;AACA,iB;AACA,W;AACA,C;;AAEA,4B;AACA,wB;AACA,6D;AACA,iB;AACA,qC;AACA,oD;AACA,wB;AACA,gF;AACA,6D;AACA,mB;AACA,2C;AACA,sB;AACA,mD;AACA,G;AACA,Y;AACA,0B;AACA,iD;AACA,C;;AAEA,4B;AACA,0D;;AAEA,6B;AACA,gE;;AAEA,2C;AACA,yC;AACA,yC;AACA,uC;AACA,uC;;AAEA,oC;AACA,qE;;AAEA,uE;AACA,sB;AACA,oD;AACA,iE;AACA,c;AACA,mB;AACA,kB;AACA,uC;AACA,uC;AACA,G;AACA,qB;AACA,C;;AAEA,qC;AACA,2B;AACA,Q;AACA,2E;AACA,uB;AACA,C;;AAEA,Y;AACA,wC;AACA,0C;AACA,gD;AACA,sC;AACA,8C;AACA,8C;AACA,4C;AACA,4C;AACA,sC;AACA,gD;AACA,4C;AACA,4C;AACA,4C;AACA,wC;AACA,kC;;AAEA,S;AACA,2C;AACA,uC;AACA,iC;AACA,6C;AACA,6C;AACA,iC;AACA,6C;;AAEA,c;AACA,yB;AACA,wB;;;AAGA,kB;;AAEA,E;AACA,kC;AACA,uB;AACA,E;AACA,wE;AACA,kE;AACA,sE;AACA,sE;AACA,qE;AACA,wE;AACA,4B;AACA,E;AACA,iE;AACA,kE;AACA,E;AACA,sE;AACA,oE;AACA,qE;AACA,E;AACA,kE;AACA,2E;AACA,yE;AACA,yE;AACA,oE;AACA,E;AACA,gD;AACA,E;AACA,0E;AACA,kB;AACA,G;;AAEA,kE;;AAEA,W;AACA,+D;;AAEA,mC;AACA,uB;AACA,kB;AACA,2C;AACA,mC;AACA,G;AACA,sC;AACA,gC;AACA,yB;AACA,4D;AACA,C;;AAEA,gC;AACA,uE;;AAEA,kD;AACA,wE;;AAEA,qC;AACA,6E;;AAEA,yC;AACA,qB;AACA,2B;AACA,iE;AACA,gB;AACA,C;;AAEA,sC;AACA,wB;AACA,uB;AACA,uD;AACA,6B;AACA,yB;AACA,+C;AACA,uB;AACA,yB;AACA,mD;AACA,sB;AACA,G;AACA,sC;AACA,C;;AAEA,wC;AACA,4B;AACA,kB;AACA,uB;AACA,6B;AACA,mD;AACA,qC;AACA,uB;AACA,e;AACA,6D;AACA,e;AACA,K;AACA,c;AACA,mB;AACA,wB;AACA,2B;AACA,Y;AACA,Y;AACA,K;AACA,G;AACA,a;AACA,kC;AACA,yB;AACA,G;AACA,0C;AACA,C;;AAEA,oC;AACA,+B;AACA,4B;AACA,kC;AACA,8B;AACA,U;AACA,2B;AACA,6C;AACA,iE;AACA,0D;AACA,uC;AACA,6B;AACA,gF;AACA,O;AACA,K;AACA,G;AACA,Q;AACA,8B;AACA,iC;AACA,wB;AACA,mB;AACA,gD;AACA,2B;AACA,G;AACA,C;;AAEA,2C;AACA,0B;AACA,kC;AACA,gB;AACA,0C;AACA,e;AACA,8D;AACA,uC;AACA,mB;AACA,iB;AACA,wC;AACA,uC;AACA,O;AACA,Y;AACA,mC;AACA,yC;AACA,O;AACA,kC;AACA,kD;AACA,0C;AACA,K;AACA,G;AACA,W;AACA,C;;AAEA,sD;AACA,yD;AACA,yD;;AAEA,sC;AACA,+B;AACA,qC;AACA,iD;AACA,oB;AACA,oB;AACA,qD;AACA,iB;AACA,G;AACA,Q;AACA,uB;AACA,+C;AACA,c;AACA,G;AACA,uB;AACA,Y;AACA,C;;AAEA,oB;AACA,oC;AACA,0E;;AAEA,oB;AACA,mC;AACA,wE;;AAEA,oB;AACA,oC;AACA,0E;;AAEA,qB;AACA,wC;AACA,gF;;AAEA,iB;AACA,kB;AACA,gB;AACA,0D;AACA,e;AACA,gB;AACA,W;AACA,C;;AAEA,qB;AACA,yB;AACA,gB;AACA,yD;AACA,W;AACA,C;;AAEA,qB;AACA,0B;AACA,gB;AACA,yD;AACA,W;AACA,C;;AAEA,8C;AACA,kB;AACA,uB;AACA,Y;AACA,4C;AACA,wC;AACA,uC;AACA,qC;AACA,qB;AACA,W;AACA,C;;AAEA,yD;AACA,8B;AACA,iC;AACA,oD;AACA,uC;AACA,Y;AACA,C;;AAEA,+B;AACA,kB;AACA,Y;AACA,kC;AACA,W;AACA,C;;AAEA,qC;AACA,uB;AACA,gC;AACA,uD;AACA,W;AACA,C;;AAEA,mC;AACA,uB;AACA,gC;AACA,oC;AACA,wC;AACA,C;;AAEA,6B;AACA,6B;AACA,sC;AACA,yB;AACA,W;AACA,C;;AAEA,yB;AACA,wD;;AAEA,0B;AACA,8D;;AAEA,yB;AACA,0D;;AAEA,2B;AACA,wB;AACA,6C;AACA,gB;AACA,sB;AACA,uB;AACA,kB;AACA,G;AACA,oB;AACA,a;AACA,uB;AACA,mB;AACA,yB;AACA,oB;AACA,K;AACA,gB;AACA,G;AACA,Q;AACA,gB;AACA,oB;AACA,gB;AACA,yB;AACA,oB;AACA,K;AACA,a;AACA,G;AACA,mB;AACA,uB;AACA,qC;AACA,U;AACA,Y;AACA,C;;AAEA,oB;AACA,+D;;AAEA,oB;AACA,oE;;AAEA,oB;AACA,yE;;AAEA,oB;AACA,0E;;AAEA,oB;AACA,6E;;AAEA,2B;AACA,kC;AACA,2B;AACA,uB;AACA,wB;AACA,C;;AAEA,+C;AACA,0B;AACA,gD;AACA,W;AACA,e;AACA,C;;AAEA,8C;AACA,6B;AACA,wC;AACA,e;AACA,6B;AACA,uB;AACA,yC;AACA,c;AACA,G;AACA,C;;AAEA,mB;AACA,qB;AACA,8B;AACA,6C;AACA,uC;;AAEA,iC;AACA,gC;AACA,iC;AACA,iC;;AAEA,kB;AACA,uD;;AAEA,wD;AACA,kD;AACA,oC;AACA,iC;AACA,iC;AACA,U;AACA,0B;AACA,Q;AACA,6E;AACA,iE;AACA,Y;AACA,C;;AAEA,0D;AACA,kD;AACA,oC;AACA,M;AACA,6B;AACA,iC;AACA,2B;AACA,6C;AACA,uD;AACA,Y;AACA,mB;AACA,C;;AAEA,4B;AACA,qB;AACA,kB;AACA,kB;AACA,kB;AACA,0C;AACA,8B;AACA,a;AACA,C;;AAEA,4B;AACA,uD;AACA,4C;AACA,gE;AACA,C;;AAEA,uC;;AAEA,0B;AACA,2B;AACA,kC;AACA,uD;AACA,sD;AACA,qD;AACA,6D;AACA,qB;AACA,oD;AACA,C;;AAEA,wB;AACA,6D;;AAEA,0B;AACA,mE;;AAEA,2C;AACA,yC;AACA,yC;AACA,uC;AACA,uC;;AAEA,kC;AACA,wB;AACA,0C;AACA,sB;AACA,wB;AACA,wB;AACA,yB;AACA,yB;AACA,a;AACA,W;AACA,uB;AACA,qB;AACA,uB;AACA,M;AACA,0B;;AAEA,mB;AACA,sD;AACA,yB;AACA,a;AACA,mB;AACA,qB;AACA,oB;AACA,mB;AACA,8B;AACA,a;AACA,K;AACA,G;;AAEA,8C;AACA,oB;AACA,iB;AACA,sC;AACA,U;AACA,wC;AACA,4C;AACA,K;;AAEA,U;AACA,uC;AACA,2C;AACA,kE;AACA,qB;AACA,kB;AACA,K;AACA,U;AACA,4D;AACA,8D;AACA,yB;AACA,K;;AAEA,yC;AACA,2C;AACA,yC;AACA,K;AACA,G;AACA,qB;AACA,C;;AAEA,mC;AACA,mB;AACA,gD;AACA,uC;AACA,qD;AACA,uD;AACA,qB;AACA,kB;AACA,a;AACA,oB;AACA,oB;AACA,G;AACA,yB;AACA,sD;AACA,sD;AACA,6B;AACA,mB;AACA,sB;AACA,K;AACA,U;AACA,mB;AACA,sB;AACA,K;AACA,G;AACA,4B;AACA,W;AACA,C;;AAEA,iC;AACA,uB;AACA,sB;AACA,0C;AACA,gB;AACA,6B;AACA,gE;AACA,W;AACA,C;;AAEA,kC;AACA,0B;AACA,sB;AACA,sE;AACA,sC;AACA,qD;AACA,0B;AACA,uB;AACA,sB;AACA,c;AACA,yE;AACA,wB;AACA,O;AACA,wC;AACA,sB;AACA,K;AACA,uB;AACA,sB;AACA,c;AACA,yE;AACA,wB;AACA,O;AACA,wC;AACA,sB;AACA,K;AACA,6B;AACA,mB;AACA,0B;AACA,mB;AACA,K;AACA,U;AACA,mB;AACA,0B;AACA,mB;AACA,K;AACA,G;AACA,8D;AACA,+C;AACA,iD;AACA,oD;AACA,C;;AAEA,yX;AACA,kD;;AAEA,mD;AACA,+B;AACA,wB;AACA,yD;AACA,yC;AACA,2C;AACA,iB;AACA,G;AACA,8B;AACA,Q;AACA,+B;AACA,kC;AACA,iE;AACA,oB;AACA,wD;AACA,G;AACA,0B;AACA,C;;AAEA,8D;AACA,4B;AACA,yC;AACA,+B;AACA,0B;AACA,2B;AACA,e;AACA,gD;AACA,gB;AACA,8B;AACA,4B;AACA,6B;AACA,kE;AACA,gB;AACA,8C;AACA,gC;AACA,0D;AACA,O;AACA,4C;AACA,K;AACA,G;AACA,c;AACA,C;;AAEA,Y;AACA,8C;AACA,0C;AACA,8C;AACA,gD;AACA,8C;AACA,8C;AACA,sC;AACA,8C;AACA,gD;AACA,0D;AACA,0D;AACA,wC;AACA,kD;;AAEA,S;AACA,qC;AACA,2C;AACA,6C;AACA,+C;AACA,uC;AACA,iD;AACA,uC;AACA,iC;AACA,iC;AACA,iC;AACA,+B;AACA,iC;AACA,uC;AACA,iC;AACA,6C;AACA,+C;AACA,yD;AACA,2C;AACA,yC;AACA,uC;AACA,2C;AACA,yC;AACA,iC;AACA,2C;AACA,2C;AACA,uC;AACA,6C;AACA,+D;AACA,uC;AACA,+C;AACA,iC;AACA,iC;AACA,yD;;AAEA,iD;;AAEA,2C;AACA,uB;AACA,qB;AACA,iB;AACA,mB;AACA,sC;;AAEA,kB;AACA,kB;AACA,K;;;;;;;;;;;;;;;;;;;AC5vCA,kB;AACA,E;AACA,gE;AACA,8C;AACA,uB;;;AAGA,G;AACA,C;AACA,iC;AACA,oD;AACA,uC;AACA,C;AACA,+C;AACA,C;AACA,G;AACA,C;AACA,mB;AACA,C;AACA,iB;AACA,iB;AACA,C;AACA,2B;AACA,wC;AACA,gD;AACA,sC;AACA,E;AACA,C;AACA,4D;AACA,0C;AACA,wD;AACA,gE;AACA,kE;AACA,kE;AACA,iE;AACA,mE;AACA,C;AACA,8B;AACA,kxB;AACA,uH;AACA,wB;AACA,mC;AACA,a;AACA,C;AACA,qC;AACA,mC;AACA,C;AACA,wC;AACA,e;AACA,e;AACA,e;AACA,e;AACA,e;AACA,e;AACA,e;AACA,e;AACA,C;AACA,gC;AACA,gC;AACA,6G;AACA,C;AACA,0F;AACA,8C;AACA,C;AACA,U;AACA,U;AACA,U;AACA,wB;AACA,U;AACA,U;AACA,U;AACA,yB;AACA,I;AACA,C;AACA,kC;AACA,kC;AACA,kC;AACA,kC;AACA,kC;AACA,kC;AACA,kC;AACA,kC;AACA,G;AACA,c;AACA,E;AACA,C;AACA,0B;AACA,oB;AACA,8B;AACA,sD;AACA,kE;AACA,G;AACA,a;AACA,E;AACA,C;AACA,8B;AACA,mB;AACA,wD;AACA,+D;AACA,0D;AACA,iB;AACA,I;AACA,2C;AACA,mB;AACA,C;AACA,2C;AACA,C;AACA,gC;AACA,C;AACA,iB;AACA,sC;AACA,I;AACA,qC;AACA,mD;AACA,mD;AACA,I;AACA,S;AACA,oD;AACA,0D;AACA,mD;AACA,I;AACA,C;AACA,G;AACA,C;AACA,iB;AACA,E;AACA,C;AACA,+B;AACA,kE;AACA,e;AACA,gD;AACA,qE;AACA,6D;AACA,G;AACA,a;AACA,E;AACA,C;AACA,mB;AACA,6D;AACA,C;AACA,C;;AAEA,kB;AACA,c;AACA,K;;;;;;;;;;;;;;;;;;;AChJA,S;;AAEA,qB;;AAEA,G;AACA,mE;AACA,E;AACA,uC;AACA,sE;AACA,kD;AACA,+D;AACA,2C;AACA,+D;AACA,G;AACA,qD;AACA,0C;;AAEA,kE;AACA,0D;;AAEA,qE;AACA,iC;AACA,wC;;;AAGA,U;AACA,uB;AACA,e;AACA,4B;AACA,I;AACA,E;;AAEA,wB;AACA,qB;AACA,mB;AACA,e;AACA,kB;AACA,E;;;AAGA,G;AACA,wE;AACA,E;AACA,uC;AACA,mD;AACA,oE;AACA,8B;AACA,+D;AACA,G;AACA,2C;AACA,kB;AACA,2C;AACA,2B;;AAEA,c;AACA,wB;AACA,wB;;AAEA,uC;AACA,W;AACA,6B;AACA,sC;AACA,wC;AACA,6C;AACA,oB;AACA,Q;AACA,8C;;AAEA,uB;;AAEA,uB;AACA,6D;;AAEA,U;AACA,kC;AACA,oB;AACA,yB;AACA,K;AACA,G;;AAEA,a;AACA,a;AACA,6B;AACA,E;;;AAGA,G;AACA,4B;AACA,E;AACA,qE;AACA,G;AACA,kD;AACA,kB;;AAEA,U;AACA,gB;AACA,I;AACA,E;;AAEA,G;AACA,8D;AACA,E;AACA,8B;AACA,yD;AACA,8C;AACA,uB;AACA,E;AACA,kE;AACA,kD;AACA,G;AACA,gE;AACA,kB;;AAEA,c;AACA,wB;AACA,wB;AACA,wB;AACA,2B;;AAEA,4C;AACA,qC;AACA,6B;AACA,0B;AACA,yC;;AAEA,0B;AACA,8D;;AAEA,uD;AACA,yB;AACA,+D;;AAEA,uC;AACA,sC;AACA,8C;AACA,oD;AACA,+C;;AAEA,a;AACA,mB;;AAEA,U;AACA,Q;AACA,I;AACA,E;;;AAGA,G;AACA,wC;AACA,E;AACA,iC;AACA,sC;AACA,E;AACA,yB;AACA,G;AACA,mE;AACA,kB;;AAEA,0D;AACA,E;;;;AAIA,qB;;;AAGA,G;AACA,wE;AACA,E;AACA,uC;AACA,mD;AACA,oE;AACA,8B;AACA,+D;AACA,G;AACA,2C;AACA,kB;AACA,2C;AACA,2B;;AAEA,c;AACA,wB;AACA,wB;AACA,wB;AACA,qD;;AAEA,uC;AACA,W;AACA,6B;AACA,sC;AACA,wC;AACA,6C;AACA,oB;AACA,Q;AACA,8C;;AAEA,iD;;AAEA,uB;AACA,6D;;AAEA,U;AACA,kC;AACA,oB;AACA,mD;AACA,K;AACA,G;;AAEA,a;AACA,a;AACA,6B;;AAEA,E;;;AAGA,G;AACA,mC;AACA,E;AACA,8C;AACA,wB;AACA,E;AACA,4B;AACA,yD;AACA,8C;AACA,uB;AACA,E;AACA,2C;AACA,G;AACA,0D;AACA,kB;;AAEA,4C;AACA,wB;AACA,yC;;AAEA,sC;AACA,8D;;AAEA,c;AACA,wB;AACA,2B;;AAEA,6D;AACA,uD;AACA,qD;AACA,4C;AACA,iC;AACA,0D;AACA,0D;;AAEA,U;AACA,qC;AACA,6B;AACA,gB;AACA,I;AACA,E;;;AAGA,G;AACA,6D;AACA,E;AACA,yD;AACA,kD;AACA,E;AACA,wD;AACA,yD;AACA,+C;AACA,G;AACA,2D;AACA,kB;;AAEA,4B;AACA,gB;;AAEA,U;AACA,mB;AACA,I;AACA,E;;;;AAIA,gB;;AAEA,G;AACA,oC;AACA,E;AACA,G;AACA,iB;AACA,yD;AACA,4R;AACA,wB;AACA,E;AACA,6B;AACA,iB;AACA,8B;AACA,gC;AACA,M;;AAEA,G;AACA,oD;AACA,E;AACA,uB;AACA,wC;AACA,sE;AACA,4C;AACA,oD;AACA,G;AACA,4C;AACA,4B;AACA,qB;;AAEA,oC;;AAEA,wC;AACA,qB;AACA,yC;AACA,gD;AACA,gD;AACA,4B;AACA,U;AACA,mD;AACA,K;AACA,K;;AAEA,mB;AACA,sE;;AAEA,+D;AACA,8D;AACA,G;;AAEA,a;AACA,E;;;AAGA,2B;AACA,kD;AACA,E","sourcesContent":["/// METEOR WRAPPER\r\nBigInteger = (function () {\r\n\r\n\r\n/// BEGIN jsbn.js\r\n\r\n/*\r\n * Copyright (c) 2003-2005  Tom Wu\r\n * All Rights Reserved.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS-IS\" AND WITHOUT WARRANTY OF ANY KIND, \r\n * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY \r\n * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  \r\n *\r\n * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,\r\n * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER\r\n * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF\r\n * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT\r\n * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\r\n *\r\n * In addition, the following condition applies:\r\n *\r\n * All redistributions must retain an intact copy of this copyright notice\r\n * and disclaimer.\r\n */\r\n\r\n// Basic JavaScript BN library - subset useful for RSA encryption.\r\n\r\n// Bits per digit\r\nvar dbits;\r\n\r\n// JavaScript engine analysis\r\nvar canary = 0xdeadbeefcafe;\r\nvar j_lm = ((canary&0xffffff)==0xefcafe);\r\n\r\n// (public) Constructor\r\nfunction BigInteger(a,b,c) {\r\n  if(a != null)\r\n    if(\"number\" == typeof a) this.fromNumber(a,b,c);\r\n    else if(b == null && \"string\" != typeof a) this.fromString(a,256);\r\n    else this.fromString(a,b);\r\n}\r\n\r\n// return new, unset BigInteger\r\nfunction nbi() { return new BigInteger(null); }\r\n\r\n// am: Compute w_j += (x*this_i), propagate carries,\r\n// c is initial carry, returns final carry.\r\n// c < 3*dvalue, x < 2*dvalue, this_i < dvalue\r\n// We need to select the fastest one that works in this environment.\r\n\r\n// am1: use a single mult and divide to get the high bits,\r\n// max digit bits should be 26 because\r\n// max internal value = 2*dvalue^2-2*dvalue (< 2^53)\r\nfunction am1(i,x,w,j,c,n) {\r\n  while(--n >= 0) {\r\n    var v = x*this[i++]+w[j]+c;\r\n    c = Math.floor(v/0x4000000);\r\n    w[j++] = v&0x3ffffff;\r\n  }\r\n  return c;\r\n}\r\n// am2 avoids a big mult-and-extract completely.\r\n// Max digit bits should be <= 30 because we do bitwise ops\r\n// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\r\nfunction am2(i,x,w,j,c,n) {\r\n  var xl = x&0x7fff, xh = x>>15;\r\n  while(--n >= 0) {\r\n    var l = this[i]&0x7fff;\r\n    var h = this[i++]>>15;\r\n    var m = xh*l+h*xl;\r\n    l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);\r\n    c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);\r\n    w[j++] = l&0x3fffffff;\r\n  }\r\n  return c;\r\n}\r\n// Alternately, set max digit bits to 28 since some\r\n// browsers slow down when dealing with 32-bit numbers.\r\nfunction am3(i,x,w,j,c,n) {\r\n  var xl = x&0x3fff, xh = x>>14;\r\n  while(--n >= 0) {\r\n    var l = this[i]&0x3fff;\r\n    var h = this[i++]>>14;\r\n    var m = xh*l+h*xl;\r\n    l = xl*l+((m&0x3fff)<<14)+w[j]+c;\r\n    c = (l>>28)+(m>>14)+xh*h;\r\n    w[j++] = l&0xfffffff;\r\n  }\r\n  return c;\r\n}\r\n\r\n/* XXX METEOR XXX\r\nif(j_lm && (navigator.appName == \"Microsoft Internet Explorer\")) {\r\n  BigInteger.prototype.am = am2;\r\n  dbits = 30;\r\n}\r\nelse if(j_lm && (navigator.appName != \"Netscape\")) {\r\n  BigInteger.prototype.am = am1;\r\n  dbits = 26;\r\n}\r\nelse \r\n*/\r\n\r\n{ // Mozilla/Netscape seems to prefer am3\r\n  BigInteger.prototype.am = am3;\r\n  dbits = 28;\r\n}\r\n\r\nBigInteger.prototype.DB = dbits;\r\nBigInteger.prototype.DM = ((1<<dbits)-1);\r\nBigInteger.prototype.DV = (1<<dbits);\r\n\r\nvar BI_FP = 52;\r\nBigInteger.prototype.FV = Math.pow(2,BI_FP);\r\nBigInteger.prototype.F1 = BI_FP-dbits;\r\nBigInteger.prototype.F2 = 2*dbits-BI_FP;\r\n\r\n// Digit conversions\r\nvar BI_RM = \"0123456789abcdefghijklmnopqrstuvwxyz\";\r\nvar BI_RC = new Array();\r\nvar rr,vv;\r\nrr = \"0\".charCodeAt(0);\r\nfor(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;\r\nrr = \"a\".charCodeAt(0);\r\nfor(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\r\nrr = \"A\".charCodeAt(0);\r\nfor(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\r\n\r\nfunction int2char(n) { return BI_RM.charAt(n); }\r\nfunction intAt(s,i) {\r\n  var c = BI_RC[s.charCodeAt(i)];\r\n  return (c==null)?-1:c;\r\n}\r\n\r\n// (protected) copy this to r\r\nfunction bnpCopyTo(r) {\r\n  for(var i = this.t-1; i >= 0; --i) r[i] = this[i];\r\n  r.t = this.t;\r\n  r.s = this.s;\r\n}\r\n\r\n// (protected) set from integer value x, -DV <= x < DV\r\nfunction bnpFromInt(x) {\r\n  this.t = 1;\r\n  this.s = (x<0)?-1:0;\r\n  if(x > 0) this[0] = x;\r\n  else if(x < -1) this[0] = x+DV;\r\n  else this.t = 0;\r\n}\r\n\r\n// return bigint initialized to value\r\nfunction nbv(i) { var r = nbi(); r.fromInt(i); return r; }\r\n\r\n// (protected) set from string and radix\r\nfunction bnpFromString(s,b) {\r\n  var k;\r\n  if(b == 16) k = 4;\r\n  else if(b == 8) k = 3;\r\n  else if(b == 256) k = 8; // byte array\r\n  else if(b == 2) k = 1;\r\n  else if(b == 32) k = 5;\r\n  else if(b == 4) k = 2;\r\n  else { this.fromRadix(s,b); return; }\r\n  this.t = 0;\r\n  this.s = 0;\r\n  var i = s.length, mi = false, sh = 0;\r\n  while(--i >= 0) {\r\n    var x = (k==8)?s[i]&0xff:intAt(s,i);\r\n    if(x < 0) {\r\n      if(s.charAt(i) == \"-\") mi = true;\r\n      continue;\r\n    }\r\n    mi = false;\r\n    if(sh == 0)\r\n      this[this.t++] = x;\r\n    else if(sh+k > this.DB) {\r\n      this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;\r\n      this[this.t++] = (x>>(this.DB-sh));\r\n    }\r\n    else\r\n      this[this.t-1] |= x<<sh;\r\n    sh += k;\r\n    if(sh >= this.DB) sh -= this.DB;\r\n  }\r\n  if(k == 8 && (s[0]&0x80) != 0) {\r\n    this.s = -1;\r\n    if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;\r\n  }\r\n  this.clamp();\r\n  if(mi) BigInteger.ZERO.subTo(this,this);\r\n}\r\n\r\n// (protected) clamp off excess high words\r\nfunction bnpClamp() {\r\n  var c = this.s&this.DM;\r\n  while(this.t > 0 && this[this.t-1] == c) --this.t;\r\n}\r\n\r\n// (public) return string representation in given radix\r\nfunction bnToString(b) {\r\n  if(this.s < 0) return \"-\"+this.negate().toString(b);\r\n  var k;\r\n  if(b == 16) k = 4;\r\n  else if(b == 8) k = 3;\r\n  else if(b == 2) k = 1;\r\n  else if(b == 32) k = 5;\r\n  else if(b == 4) k = 2;\r\n  else return this.toRadix(b);\r\n  var km = (1<<k)-1, d, m = false, r = \"\", i = this.t;\r\n  var p = this.DB-(i*this.DB)%k;\r\n  if(i-- > 0) {\r\n    if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }\r\n    while(i >= 0) {\r\n      if(p < k) {\r\n        d = (this[i]&((1<<p)-1))<<(k-p);\r\n        d |= this[--i]>>(p+=this.DB-k);\r\n      }\r\n      else {\r\n        d = (this[i]>>(p-=k))&km;\r\n        if(p <= 0) { p += this.DB; --i; }\r\n      }\r\n      if(d > 0) m = true;\r\n      if(m) r += int2char(d);\r\n    }\r\n  }\r\n  return m?r:\"0\";\r\n}\r\n\r\n// (public) -this\r\nfunction bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }\r\n\r\n// (public) |this|\r\nfunction bnAbs() { return (this.s<0)?this.negate():this; }\r\n\r\n// (public) return + if this > a, - if this < a, 0 if equal\r\nfunction bnCompareTo(a) {\r\n  var r = this.s-a.s;\r\n  if(r != 0) return r;\r\n  var i = this.t;\r\n  r = i-a.t;\r\n  if(r != 0) return r;\r\n  while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;\r\n  return 0;\r\n}\r\n\r\n// returns bit length of the integer x\r\nfunction nbits(x) {\r\n  var r = 1, t;\r\n  if((t=x>>>16) != 0) { x = t; r += 16; }\r\n  if((t=x>>8) != 0) { x = t; r += 8; }\r\n  if((t=x>>4) != 0) { x = t; r += 4; }\r\n  if((t=x>>2) != 0) { x = t; r += 2; }\r\n  if((t=x>>1) != 0) { x = t; r += 1; }\r\n  return r;\r\n}\r\n\r\n// (public) return the number of bits in \"this\"\r\nfunction bnBitLength() {\r\n  if(this.t <= 0) return 0;\r\n  return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));\r\n}\r\n\r\n// (protected) r = this << n*DB\r\nfunction bnpDLShiftTo(n,r) {\r\n  var i;\r\n  for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];\r\n  for(i = n-1; i >= 0; --i) r[i] = 0;\r\n  r.t = this.t+n;\r\n  r.s = this.s;\r\n}\r\n\r\n// (protected) r = this >> n*DB\r\nfunction bnpDRShiftTo(n,r) {\r\n  for(var i = n; i < this.t; ++i) r[i-n] = this[i];\r\n  r.t = Math.max(this.t-n,0);\r\n  r.s = this.s;\r\n}\r\n\r\n// (protected) r = this << n\r\nfunction bnpLShiftTo(n,r) {\r\n  var bs = n%this.DB;\r\n  var cbs = this.DB-bs;\r\n  var bm = (1<<cbs)-1;\r\n  var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;\r\n  for(i = this.t-1; i >= 0; --i) {\r\n    r[i+ds+1] = (this[i]>>cbs)|c;\r\n    c = (this[i]&bm)<<bs;\r\n  }\r\n  for(i = ds-1; i >= 0; --i) r[i] = 0;\r\n  r[ds] = c;\r\n  r.t = this.t+ds+1;\r\n  r.s = this.s;\r\n  r.clamp();\r\n}\r\n\r\n// (protected) r = this >> n\r\nfunction bnpRShiftTo(n,r) {\r\n  r.s = this.s;\r\n  var ds = Math.floor(n/this.DB);\r\n  if(ds >= this.t) { r.t = 0; return; }\r\n  var bs = n%this.DB;\r\n  var cbs = this.DB-bs;\r\n  var bm = (1<<bs)-1;\r\n  r[0] = this[ds]>>bs;\r\n  for(var i = ds+1; i < this.t; ++i) {\r\n    r[i-ds-1] |= (this[i]&bm)<<cbs;\r\n    r[i-ds] = this[i]>>bs;\r\n  }\r\n  if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;\r\n  r.t = this.t-ds;\r\n  r.clamp();\r\n}\r\n\r\n// (protected) r = this - a\r\nfunction bnpSubTo(a,r) {\r\n  var i = 0, c = 0, m = Math.min(a.t,this.t);\r\n  while(i < m) {\r\n    c += this[i]-a[i];\r\n    r[i++] = c&this.DM;\r\n    c >>= this.DB;\r\n  }\r\n  if(a.t < this.t) {\r\n    c -= a.s;\r\n    while(i < this.t) {\r\n      c += this[i];\r\n      r[i++] = c&this.DM;\r\n      c >>= this.DB;\r\n    }\r\n    c += this.s;\r\n  }\r\n  else {\r\n    c += this.s;\r\n    while(i < a.t) {\r\n      c -= a[i];\r\n      r[i++] = c&this.DM;\r\n      c >>= this.DB;\r\n    }\r\n    c -= a.s;\r\n  }\r\n  r.s = (c<0)?-1:0;\r\n  if(c < -1) r[i++] = this.DV+c;\r\n  else if(c > 0) r[i++] = c;\r\n  r.t = i;\r\n  r.clamp();\r\n}\r\n\r\n// (protected) r = this * a, r != this,a (HAC 14.12)\r\n// \"this\" should be the larger one if appropriate.\r\nfunction bnpMultiplyTo(a,r) {\r\n  var x = this.abs(), y = a.abs();\r\n  var i = x.t;\r\n  r.t = i+y.t;\r\n  while(--i >= 0) r[i] = 0;\r\n  for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);\r\n  r.s = 0;\r\n  r.clamp();\r\n  if(this.s != a.s) BigInteger.ZERO.subTo(r,r);\r\n}\r\n\r\n// (protected) r = this^2, r != this (HAC 14.16)\r\nfunction bnpSquareTo(r) {\r\n  var x = this.abs();\r\n  var i = r.t = 2*x.t;\r\n  while(--i >= 0) r[i] = 0;\r\n  for(i = 0; i < x.t-1; ++i) {\r\n    var c = x.am(i,x[i],r,2*i,0,1);\r\n    if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {\r\n      r[i+x.t] -= x.DV;\r\n      r[i+x.t+1] = 1;\r\n    }\r\n  }\r\n  if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);\r\n  r.s = 0;\r\n  r.clamp();\r\n}\r\n\r\n// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\r\n// r != q, this != m.  q or r may be null.\r\nfunction bnpDivRemTo(m,q,r) {\r\n  var pm = m.abs();\r\n  if(pm.t <= 0) return;\r\n  var pt = this.abs();\r\n  if(pt.t < pm.t) {\r\n    if(q != null) q.fromInt(0);\r\n    if(r != null) this.copyTo(r);\r\n    return;\r\n  }\r\n  if(r == null) r = nbi();\r\n  var y = nbi(), ts = this.s, ms = m.s;\r\n  var nsh = this.DB-nbits(pm[pm.t-1]);\t// normalize modulus\r\n  if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }\r\n  else { pm.copyTo(y); pt.copyTo(r); }\r\n  var ys = y.t;\r\n  var y0 = y[ys-1];\r\n  if(y0 == 0) return;\r\n  var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);\r\n  var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;\r\n  var i = r.t, j = i-ys, t = (q==null)?nbi():q;\r\n  y.dlShiftTo(j,t);\r\n  if(r.compareTo(t) >= 0) {\r\n    r[r.t++] = 1;\r\n    r.subTo(t,r);\r\n  }\r\n  BigInteger.ONE.dlShiftTo(ys,t);\r\n  t.subTo(y,y);\t// \"negative\" y so we can replace sub with am later\r\n  while(y.t < ys) y[y.t++] = 0;\r\n  while(--j >= 0) {\r\n    // Estimate quotient digit\r\n    var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);\r\n    if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {\t// Try it out\r\n      y.dlShiftTo(j,t);\r\n      r.subTo(t,r);\r\n      while(r[i] < --qd) r.subTo(t,r);\r\n    }\r\n  }\r\n  if(q != null) {\r\n    r.drShiftTo(ys,q);\r\n    if(ts != ms) BigInteger.ZERO.subTo(q,q);\r\n  }\r\n  r.t = ys;\r\n  r.clamp();\r\n  if(nsh > 0) r.rShiftTo(nsh,r);\t// Denormalize remainder\r\n  if(ts < 0) BigInteger.ZERO.subTo(r,r);\r\n}\r\n\r\n// (public) this mod a\r\nfunction bnMod(a) {\r\n  var r = nbi();\r\n  this.abs().divRemTo(a,null,r);\r\n  if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);\r\n  return r;\r\n}\r\n\r\n// Modular reduction using \"classic\" algorithm\r\nfunction Classic(m) { this.m = m; }\r\nfunction cConvert(x) {\r\n  if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);\r\n  else return x;\r\n}\r\nfunction cRevert(x) { return x; }\r\nfunction cReduce(x) { x.divRemTo(this.m,null,x); }\r\nfunction cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }\r\nfunction cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }\r\n\r\nClassic.prototype.convert = cConvert;\r\nClassic.prototype.revert = cRevert;\r\nClassic.prototype.reduce = cReduce;\r\nClassic.prototype.mulTo = cMulTo;\r\nClassic.prototype.sqrTo = cSqrTo;\r\n\r\n// (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\r\n// justification:\r\n//         xy == 1 (mod m)\r\n//         xy =  1+km\r\n//   xy(2-xy) = (1+km)(1-km)\r\n// x[y(2-xy)] = 1-k^2m^2\r\n// x[y(2-xy)] == 1 (mod m^2)\r\n// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\r\n// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\r\n// JS multiply \"overflows\" differently from C/C++, so care is needed here.\r\nfunction bnpInvDigit() {\r\n  if(this.t < 1) return 0;\r\n  var x = this[0];\r\n  if((x&1) == 0) return 0;\r\n  var y = x&3;\t\t// y == 1/x mod 2^2\r\n  y = (y*(2-(x&0xf)*y))&0xf;\t// y == 1/x mod 2^4\r\n  y = (y*(2-(x&0xff)*y))&0xff;\t// y == 1/x mod 2^8\r\n  y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;\t// y == 1/x mod 2^16\r\n  // last step - calculate inverse mod DV directly;\r\n  // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\r\n  y = (y*(2-x*y%this.DV))%this.DV;\t\t// y == 1/x mod 2^dbits\r\n  // we really want the negative inverse, and -DV < y < DV\r\n  return (y>0)?this.DV-y:-y;\r\n}\r\n\r\n// Montgomery reduction\r\nfunction Montgomery(m) {\r\n  this.m = m;\r\n  this.mp = m.invDigit();\r\n  this.mpl = this.mp&0x7fff;\r\n  this.mph = this.mp>>15;\r\n  this.um = (1<<(m.DB-15))-1;\r\n  this.mt2 = 2*m.t;\r\n}\r\n\r\n// xR mod m\r\nfunction montConvert(x) {\r\n  var r = nbi();\r\n  x.abs().dlShiftTo(this.m.t,r);\r\n  r.divRemTo(this.m,null,r);\r\n  if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);\r\n  return r;\r\n}\r\n\r\n// x/R mod m\r\nfunction montRevert(x) {\r\n  var r = nbi();\r\n  x.copyTo(r);\r\n  this.reduce(r);\r\n  return r;\r\n}\r\n\r\n// x = x/R mod m (HAC 14.32)\r\nfunction montReduce(x) {\r\n  while(x.t <= this.mt2)\t// pad x so am has enough room later\r\n    x[x.t++] = 0;\r\n  for(var i = 0; i < this.m.t; ++i) {\r\n    // faster way of calculating u0 = x[i]*mp mod DV\r\n    var j = x[i]&0x7fff;\r\n    var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;\r\n    // use am to combine the multiply-shift-add into one call\r\n    j = i+this.m.t;\r\n    x[j] += this.m.am(0,u0,x,i,0,this.m.t);\r\n    // propagate carry\r\n    while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }\r\n  }\r\n  x.clamp();\r\n  x.drShiftTo(this.m.t,x);\r\n  if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);\r\n}\r\n\r\n// r = \"x^2/R mod m\"; x != r\r\nfunction montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }\r\n\r\n// r = \"xy/R mod m\"; x,y != r\r\nfunction montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }\r\n\r\nMontgomery.prototype.convert = montConvert;\r\nMontgomery.prototype.revert = montRevert;\r\nMontgomery.prototype.reduce = montReduce;\r\nMontgomery.prototype.mulTo = montMulTo;\r\nMontgomery.prototype.sqrTo = montSqrTo;\r\n\r\n// (protected) true iff this is even\r\nfunction bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }\r\n\r\n// (protected) this^e, e < 2^32, doing sqr and mul with \"r\" (HAC 14.79)\r\nfunction bnpExp(e,z) {\r\n  if(e > 0xffffffff || e < 1) return BigInteger.ONE;\r\n  var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;\r\n  g.copyTo(r);\r\n  while(--i >= 0) {\r\n    z.sqrTo(r,r2);\r\n    if((e&(1<<i)) > 0) z.mulTo(r2,g,r);\r\n    else { var t = r; r = r2; r2 = t; }\r\n  }\r\n  return z.revert(r);\r\n}\r\n\r\n// (public) this^e % m, 0 <= e < 2^32\r\nfunction bnModPowInt(e,m) {\r\n  var z;\r\n  if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);\r\n  return this.exp(e,z);\r\n}\r\n\r\n// protected\r\nBigInteger.prototype.copyTo = bnpCopyTo;\r\nBigInteger.prototype.fromInt = bnpFromInt;\r\nBigInteger.prototype.fromString = bnpFromString;\r\nBigInteger.prototype.clamp = bnpClamp;\r\nBigInteger.prototype.dlShiftTo = bnpDLShiftTo;\r\nBigInteger.prototype.drShiftTo = bnpDRShiftTo;\r\nBigInteger.prototype.lShiftTo = bnpLShiftTo;\r\nBigInteger.prototype.rShiftTo = bnpRShiftTo;\r\nBigInteger.prototype.subTo = bnpSubTo;\r\nBigInteger.prototype.multiplyTo = bnpMultiplyTo;\r\nBigInteger.prototype.squareTo = bnpSquareTo;\r\nBigInteger.prototype.divRemTo = bnpDivRemTo;\r\nBigInteger.prototype.invDigit = bnpInvDigit;\r\nBigInteger.prototype.isEven = bnpIsEven;\r\nBigInteger.prototype.exp = bnpExp;\r\n\r\n// public\r\nBigInteger.prototype.toString = bnToString;\r\nBigInteger.prototype.negate = bnNegate;\r\nBigInteger.prototype.abs = bnAbs;\r\nBigInteger.prototype.compareTo = bnCompareTo;\r\nBigInteger.prototype.bitLength = bnBitLength;\r\nBigInteger.prototype.mod = bnMod;\r\nBigInteger.prototype.modPowInt = bnModPowInt;\r\n\r\n// \"constants\"\r\nBigInteger.ZERO = nbv(0);\r\nBigInteger.ONE = nbv(1);\r\n\r\n\r\n/// BEGIN jsbn2.js\r\n\r\n/*\r\n * Copyright (c) 2003-2005  Tom Wu\r\n * All Rights Reserved.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS-IS\" AND WITHOUT WARRANTY OF ANY KIND, \r\n * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY \r\n * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  \r\n *\r\n * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,\r\n * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER\r\n * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF\r\n * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT\r\n * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\r\n *\r\n * In addition, the following condition applies:\r\n *\r\n * All redistributions must retain an intact copy of this copyright notice\r\n * and disclaimer.\r\n */\r\n\r\n// Extended JavaScript BN functions, required for RSA private ops.\r\n\r\n// (public)\r\nfunction bnClone() { var r = nbi(); this.copyTo(r); return r; }\r\n\r\n// (public) return value as integer\r\nfunction bnIntValue() {\r\n  if(this.s < 0) {\r\n    if(this.t == 1) return this[0]-this.DV;\r\n    else if(this.t == 0) return -1;\r\n  }\r\n  else if(this.t == 1) return this[0];\r\n  else if(this.t == 0) return 0;\r\n  // assumes 16 < DB < 32\r\n  return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];\r\n}\r\n\r\n// (public) return value as byte\r\nfunction bnByteValue() { return (this.t==0)?this.s:(this[0]<<24)>>24; }\r\n\r\n// (public) return value as short (assumes DB>=16)\r\nfunction bnShortValue() { return (this.t==0)?this.s:(this[0]<<16)>>16; }\r\n\r\n// (protected) return x s.t. r^x < DV\r\nfunction bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }\r\n\r\n// (public) 0 if this == 0, 1 if this > 0\r\nfunction bnSigNum() {\r\n  if(this.s < 0) return -1;\r\n  else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;\r\n  else return 1;\r\n}\r\n\r\n// (protected) convert to radix string\r\nfunction bnpToRadix(b) {\r\n  if(b == null) b = 10;\r\n  if(this.signum() == 0 || b < 2 || b > 36) return \"0\";\r\n  var cs = this.chunkSize(b);\r\n  var a = Math.pow(b,cs);\r\n  var d = nbv(a), y = nbi(), z = nbi(), r = \"\";\r\n  this.divRemTo(d,y,z);\r\n  while(y.signum() > 0) {\r\n    r = (a+z.intValue()).toString(b).substr(1) + r;\r\n    y.divRemTo(d,y,z);\r\n  }\r\n  return z.intValue().toString(b) + r;\r\n}\r\n\r\n// (protected) convert from radix string\r\nfunction bnpFromRadix(s,b) {\r\n  this.fromInt(0);\r\n  if(b == null) b = 10;\r\n  var cs = this.chunkSize(b);\r\n  var d = Math.pow(b,cs), mi = false, j = 0, w = 0;\r\n  for(var i = 0; i < s.length; ++i) {\r\n    var x = intAt(s,i);\r\n    if(x < 0) {\r\n      if(s.charAt(i) == \"-\" && this.signum() == 0) mi = true;\r\n      continue;\r\n    }\r\n    w = b*w+x;\r\n    if(++j >= cs) {\r\n      this.dMultiply(d);\r\n      this.dAddOffset(w,0);\r\n      j = 0;\r\n      w = 0;\r\n    }\r\n  }\r\n  if(j > 0) {\r\n    this.dMultiply(Math.pow(b,j));\r\n    this.dAddOffset(w,0);\r\n  }\r\n  if(mi) BigInteger.ZERO.subTo(this,this);\r\n}\r\n\r\n// (protected) alternate constructor\r\nfunction bnpFromNumber(a,b,c) {\r\n  if(\"number\" == typeof b) {\r\n    // new BigInteger(int,int,RNG)\r\n    if(a < 2) this.fromInt(1);\r\n    else {\r\n      this.fromNumber(a,c);\r\n      if(!this.testBit(a-1))\t// force MSB set\r\n        this.bitwiseTo(BigInteger.ONE.shiftLeft(a-1),op_or,this);\r\n      if(this.isEven()) this.dAddOffset(1,0); // force odd\r\n      while(!this.isProbablePrime(b)) {\r\n        this.dAddOffset(2,0);\r\n        if(this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a-1),this);\r\n      }\r\n    }\r\n  }\r\n  else {\r\n    // new BigInteger(int,RNG)\r\n    var x = new Array(), t = a&7;\r\n    x.length = (a>>3)+1;\r\n    b.nextBytes(x);\r\n    if(t > 0) x[0] &= ((1<<t)-1); else x[0] = 0;\r\n    this.fromString(x,256);\r\n  }\r\n}\r\n\r\n// (public) convert to bigendian byte array\r\nfunction bnToByteArray() {\r\n  var i = this.t, r = new Array();\r\n  r[0] = this.s;\r\n  var p = this.DB-(i*this.DB)%8, d, k = 0;\r\n  if(i-- > 0) {\r\n    if(p < this.DB && (d = this[i]>>p) != (this.s&this.DM)>>p)\r\n      r[k++] = d|(this.s<<(this.DB-p));\r\n    while(i >= 0) {\r\n      if(p < 8) {\r\n        d = (this[i]&((1<<p)-1))<<(8-p);\r\n        d |= this[--i]>>(p+=this.DB-8);\r\n      }\r\n      else {\r\n        d = (this[i]>>(p-=8))&0xff;\r\n        if(p <= 0) { p += this.DB; --i; }\r\n      }\r\n      if((d&0x80) != 0) d |= -256;\r\n      if(k == 0 && (this.s&0x80) != (d&0x80)) ++k;\r\n      if(k > 0 || d != this.s) r[k++] = d;\r\n    }\r\n  }\r\n  return r;\r\n}\r\n\r\nfunction bnEquals(a) { return(this.compareTo(a)==0); }\r\nfunction bnMin(a) { return(this.compareTo(a)<0)?this:a; }\r\nfunction bnMax(a) { return(this.compareTo(a)>0)?this:a; }\r\n\r\n// (protected) r = this op a (bitwise)\r\nfunction bnpBitwiseTo(a,op,r) {\r\n  var i, f, m = Math.min(a.t,this.t);\r\n  for(i = 0; i < m; ++i) r[i] = op(this[i],a[i]);\r\n  if(a.t < this.t) {\r\n    f = a.s&this.DM;\r\n    for(i = m; i < this.t; ++i) r[i] = op(this[i],f);\r\n    r.t = this.t;\r\n  }\r\n  else {\r\n    f = this.s&this.DM;\r\n    for(i = m; i < a.t; ++i) r[i] = op(f,a[i]);\r\n    r.t = a.t;\r\n  }\r\n  r.s = op(this.s,a.s);\r\n  r.clamp();\r\n}\r\n\r\n// (public) this & a\r\nfunction op_and(x,y) { return x&y; }\r\nfunction bnAnd(a) { var r = nbi(); this.bitwiseTo(a,op_and,r); return r; }\r\n\r\n// (public) this | a\r\nfunction op_or(x,y) { return x|y; }\r\nfunction bnOr(a) { var r = nbi(); this.bitwiseTo(a,op_or,r); return r; }\r\n\r\n// (public) this ^ a\r\nfunction op_xor(x,y) { return x^y; }\r\nfunction bnXor(a) { var r = nbi(); this.bitwiseTo(a,op_xor,r); return r; }\r\n\r\n// (public) this & ~a\r\nfunction op_andnot(x,y) { return x&~y; }\r\nfunction bnAndNot(a) { var r = nbi(); this.bitwiseTo(a,op_andnot,r); return r; }\r\n\r\n// (public) ~this\r\nfunction bnNot() {\r\n  var r = nbi();\r\n  for(var i = 0; i < this.t; ++i) r[i] = this.DM&~this[i];\r\n  r.t = this.t;\r\n  r.s = ~this.s;\r\n  return r;\r\n}\r\n\r\n// (public) this << n\r\nfunction bnShiftLeft(n) {\r\n  var r = nbi();\r\n  if(n < 0) this.rShiftTo(-n,r); else this.lShiftTo(n,r);\r\n  return r;\r\n}\r\n\r\n// (public) this >> n\r\nfunction bnShiftRight(n) {\r\n  var r = nbi();\r\n  if(n < 0) this.lShiftTo(-n,r); else this.rShiftTo(n,r);\r\n  return r;\r\n}\r\n\r\n// return index of lowest 1-bit in x, x < 2^31\r\nfunction lbit(x) {\r\n  if(x == 0) return -1;\r\n  var r = 0;\r\n  if((x&0xffff) == 0) { x >>= 16; r += 16; }\r\n  if((x&0xff) == 0) { x >>= 8; r += 8; }\r\n  if((x&0xf) == 0) { x >>= 4; r += 4; }\r\n  if((x&3) == 0) { x >>= 2; r += 2; }\r\n  if((x&1) == 0) ++r;\r\n  return r;\r\n}\r\n\r\n// (public) returns index of lowest 1-bit (or -1 if none)\r\nfunction bnGetLowestSetBit() {\r\n  for(var i = 0; i < this.t; ++i)\r\n    if(this[i] != 0) return i*this.DB+lbit(this[i]);\r\n  if(this.s < 0) return this.t*this.DB;\r\n  return -1;\r\n}\r\n\r\n// return number of 1 bits in x\r\nfunction cbit(x) {\r\n  var r = 0;\r\n  while(x != 0) { x &= x-1; ++r; }\r\n  return r;\r\n}\r\n\r\n// (public) return number of set bits\r\nfunction bnBitCount() {\r\n  var r = 0, x = this.s&this.DM;\r\n  for(var i = 0; i < this.t; ++i) r += cbit(this[i]^x);\r\n  return r;\r\n}\r\n\r\n// (public) true iff nth bit is set\r\nfunction bnTestBit(n) {\r\n  var j = Math.floor(n/this.DB);\r\n  if(j >= this.t) return(this.s!=0);\r\n  return((this[j]&(1<<(n%this.DB)))!=0);\r\n}\r\n\r\n// (protected) this op (1<<n)\r\nfunction bnpChangeBit(n,op) {\r\n  var r = BigInteger.ONE.shiftLeft(n);\r\n  this.bitwiseTo(r,op,r);\r\n  return r;\r\n}\r\n\r\n// (public) this | (1<<n)\r\nfunction bnSetBit(n) { return this.changeBit(n,op_or); }\r\n\r\n// (public) this & ~(1<<n)\r\nfunction bnClearBit(n) { return this.changeBit(n,op_andnot); }\r\n\r\n// (public) this ^ (1<<n)\r\nfunction bnFlipBit(n) { return this.changeBit(n,op_xor); }\r\n\r\n// (protected) r = this + a\r\nfunction bnpAddTo(a,r) {\r\n  var i = 0, c = 0, m = Math.min(a.t,this.t);\r\n  while(i < m) {\r\n    c += this[i]+a[i];\r\n    r[i++] = c&this.DM;\r\n    c >>= this.DB;\r\n  }\r\n  if(a.t < this.t) {\r\n    c += a.s;\r\n    while(i < this.t) {\r\n      c += this[i];\r\n      r[i++] = c&this.DM;\r\n      c >>= this.DB;\r\n    }\r\n    c += this.s;\r\n  }\r\n  else {\r\n    c += this.s;\r\n    while(i < a.t) {\r\n      c += a[i];\r\n      r[i++] = c&this.DM;\r\n      c >>= this.DB;\r\n    }\r\n    c += a.s;\r\n  }\r\n  r.s = (c<0)?-1:0;\r\n  if(c > 0) r[i++] = c;\r\n  else if(c < -1) r[i++] = this.DV+c;\r\n  r.t = i;\r\n  r.clamp();\r\n}\r\n\r\n// (public) this + a\r\nfunction bnAdd(a) { var r = nbi(); this.addTo(a,r); return r; }\r\n\r\n// (public) this - a\r\nfunction bnSubtract(a) { var r = nbi(); this.subTo(a,r); return r; }\r\n\r\n// (public) this * a\r\nfunction bnMultiply(a) { var r = nbi(); this.multiplyTo(a,r); return r; }\r\n\r\n// (public) this / a\r\nfunction bnDivide(a) { var r = nbi(); this.divRemTo(a,r,null); return r; }\r\n\r\n// (public) this % a\r\nfunction bnRemainder(a) { var r = nbi(); this.divRemTo(a,null,r); return r; }\r\n\r\n// (public) [this/a,this%a]\r\nfunction bnDivideAndRemainder(a) {\r\n  var q = nbi(), r = nbi();\r\n  this.divRemTo(a,q,r);\r\n  return new Array(q,r);\r\n}\r\n\r\n// (protected) this *= n, this >= 0, 1 < n < DV\r\nfunction bnpDMultiply(n) {\r\n  this[this.t] = this.am(0,n-1,this,0,0,this.t);\r\n  ++this.t;\r\n  this.clamp();\r\n}\r\n\r\n// (protected) this += n << w words, this >= 0\r\nfunction bnpDAddOffset(n,w) {\r\n  while(this.t <= w) this[this.t++] = 0;\r\n  this[w] += n;\r\n  while(this[w] >= this.DV) {\r\n    this[w] -= this.DV;\r\n    if(++w >= this.t) this[this.t++] = 0;\r\n    ++this[w];\r\n  }\r\n}\r\n\r\n// A \"null\" reducer\r\nfunction NullExp() {}\r\nfunction nNop(x) { return x; }\r\nfunction nMulTo(x,y,r) { x.multiplyTo(y,r); }\r\nfunction nSqrTo(x,r) { x.squareTo(r); }\r\n\r\nNullExp.prototype.convert = nNop;\r\nNullExp.prototype.revert = nNop;\r\nNullExp.prototype.mulTo = nMulTo;\r\nNullExp.prototype.sqrTo = nSqrTo;\r\n\r\n// (public) this^e\r\nfunction bnPow(e) { return this.exp(e,new NullExp()); }\r\n\r\n// (protected) r = lower n words of \"this * a\", a.t <= n\r\n// \"this\" should be the larger one if appropriate.\r\nfunction bnpMultiplyLowerTo(a,n,r) {\r\n  var i = Math.min(this.t+a.t,n);\r\n  r.s = 0; // assumes a,this >= 0\r\n  r.t = i;\r\n  while(i > 0) r[--i] = 0;\r\n  var j;\r\n  for(j = r.t-this.t; i < j; ++i) r[i+this.t] = this.am(0,a[i],r,i,0,this.t);\r\n  for(j = Math.min(a.t,n); i < j; ++i) this.am(0,a[i],r,i,0,n-i);\r\n  r.clamp();\r\n}\r\n\r\n// (protected) r = \"this * a\" without lower n words, n > 0\r\n// \"this\" should be the larger one if appropriate.\r\nfunction bnpMultiplyUpperTo(a,n,r) {\r\n  --n;\r\n  var i = r.t = this.t+a.t-n;\r\n  r.s = 0; // assumes a,this >= 0\r\n  while(--i >= 0) r[i] = 0;\r\n  for(i = Math.max(n-this.t,0); i < a.t; ++i)\r\n    r[this.t+i-n] = this.am(n-i,a[i],r,0,0,this.t+i-n);\r\n  r.clamp();\r\n  r.drShiftTo(1,r);\r\n}\r\n\r\n// Barrett modular reduction\r\nfunction Barrett(m) {\r\n  // setup Barrett\r\n  this.r2 = nbi();\r\n  this.q3 = nbi();\r\n  BigInteger.ONE.dlShiftTo(2*m.t,this.r2);\r\n  this.mu = this.r2.divide(m);\r\n  this.m = m;\r\n}\r\n\r\nfunction barrettConvert(x) {\r\n  if(x.s < 0 || x.t > 2*this.m.t) return x.mod(this.m);\r\n  else if(x.compareTo(this.m) < 0) return x;\r\n  else { var r = nbi(); x.copyTo(r); this.reduce(r); return r; }\r\n}\r\n\r\nfunction barrettRevert(x) { return x; }\r\n\r\n// x = x mod m (HAC 14.42)\r\nfunction barrettReduce(x) {\r\n  x.drShiftTo(this.m.t-1,this.r2);\r\n  if(x.t > this.m.t+1) { x.t = this.m.t+1; x.clamp(); }\r\n  this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3);\r\n  this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);\r\n  while(x.compareTo(this.r2) < 0) x.dAddOffset(1,this.m.t+1);\r\n  x.subTo(this.r2,x);\r\n  while(x.compareTo(this.m) >= 0) x.subTo(this.m,x);\r\n}\r\n\r\n// r = x^2 mod m; x != r\r\nfunction barrettSqrTo(x,r) { x.squareTo(r); this.reduce(r); }\r\n\r\n// r = x*y mod m; x,y != r\r\nfunction barrettMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }\r\n\r\nBarrett.prototype.convert = barrettConvert;\r\nBarrett.prototype.revert = barrettRevert;\r\nBarrett.prototype.reduce = barrettReduce;\r\nBarrett.prototype.mulTo = barrettMulTo;\r\nBarrett.prototype.sqrTo = barrettSqrTo;\r\n\r\n// (public) this^e % m (HAC 14.85)\r\nfunction bnModPow(e,m) {\r\n  var i = e.bitLength(), k, r = nbv(1), z;\r\n  if(i <= 0) return r;\r\n  else if(i < 18) k = 1;\r\n  else if(i < 48) k = 3;\r\n  else if(i < 144) k = 4;\r\n  else if(i < 768) k = 5;\r\n  else k = 6;\r\n  if(i < 8)\r\n    z = new Classic(m);\r\n  else if(m.isEven())\r\n    z = new Barrett(m);\r\n  else\r\n    z = new Montgomery(m);\r\n\r\n  // precomputation\r\n  var g = new Array(), n = 3, k1 = k-1, km = (1<<k)-1;\r\n  g[1] = z.convert(this);\r\n  if(k > 1) {\r\n    var g2 = nbi();\r\n    z.sqrTo(g[1],g2);\r\n    while(n <= km) {\r\n      g[n] = nbi();\r\n      z.mulTo(g2,g[n-2],g[n]);\r\n      n += 2;\r\n    }\r\n  }\r\n\r\n  var j = e.t-1, w, is1 = true, r2 = nbi(), t;\r\n  i = nbits(e[j])-1;\r\n  while(j >= 0) {\r\n    if(i >= k1) w = (e[j]>>(i-k1))&km;\r\n    else {\r\n      w = (e[j]&((1<<(i+1))-1))<<(k1-i);\r\n      if(j > 0) w |= e[j-1]>>(this.DB+i-k1);\r\n    }\r\n\r\n    n = k;\r\n    while((w&1) == 0) { w >>= 1; --n; }\r\n    if((i -= n) < 0) { i += this.DB; --j; }\r\n    if(is1) {\t// ret == 1, don't bother squaring or multiplying it\r\n      g[w].copyTo(r);\r\n      is1 = false;\r\n    }\r\n    else {\r\n      while(n > 1) { z.sqrTo(r,r2); z.sqrTo(r2,r); n -= 2; }\r\n      if(n > 0) z.sqrTo(r,r2); else { t = r; r = r2; r2 = t; }\r\n      z.mulTo(r2,g[w],r);\r\n    }\r\n\r\n    while(j >= 0 && (e[j]&(1<<i)) == 0) {\r\n      z.sqrTo(r,r2); t = r; r = r2; r2 = t;\r\n      if(--i < 0) { i = this.DB-1; --j; }\r\n    }\r\n  }\r\n  return z.revert(r);\r\n}\r\n\r\n// (public) gcd(this,a) (HAC 14.54)\r\nfunction bnGCD(a) {\r\n  var x = (this.s<0)?this.negate():this.clone();\r\n  var y = (a.s<0)?a.negate():a.clone();\r\n  if(x.compareTo(y) < 0) { var t = x; x = y; y = t; }\r\n  var i = x.getLowestSetBit(), g = y.getLowestSetBit();\r\n  if(g < 0) return x;\r\n  if(i < g) g = i;\r\n  if(g > 0) {\r\n    x.rShiftTo(g,x);\r\n    y.rShiftTo(g,y);\r\n  }\r\n  while(x.signum() > 0) {\r\n    if((i = x.getLowestSetBit()) > 0) x.rShiftTo(i,x);\r\n    if((i = y.getLowestSetBit()) > 0) y.rShiftTo(i,y);\r\n    if(x.compareTo(y) >= 0) {\r\n      x.subTo(y,x);\r\n      x.rShiftTo(1,x);\r\n    }\r\n    else {\r\n      y.subTo(x,y);\r\n      y.rShiftTo(1,y);\r\n    }\r\n  }\r\n  if(g > 0) y.lShiftTo(g,y);\r\n  return y;\r\n}\r\n\r\n// (protected) this % n, n < 2^26\r\nfunction bnpModInt(n) {\r\n  if(n <= 0) return 0;\r\n  var d = this.DV%n, r = (this.s<0)?n-1:0;\r\n  if(this.t > 0)\r\n    if(d == 0) r = this[0]%n;\r\n    else for(var i = this.t-1; i >= 0; --i) r = (d*r+this[i])%n;\r\n  return r;\r\n}\r\n\r\n// (public) 1/this % m (HAC 14.61)\r\nfunction bnModInverse(m) {\r\n  var ac = m.isEven();\r\n  if((this.isEven() && ac) || m.signum() == 0) return BigInteger.ZERO;\r\n  var u = m.clone(), v = this.clone();\r\n  var a = nbv(1), b = nbv(0), c = nbv(0), d = nbv(1);\r\n  while(u.signum() != 0) {\r\n    while(u.isEven()) {\r\n      u.rShiftTo(1,u);\r\n      if(ac) {\r\n        if(!a.isEven() || !b.isEven()) { a.addTo(this,a); b.subTo(m,b); }\r\n        a.rShiftTo(1,a);\r\n      }\r\n      else if(!b.isEven()) b.subTo(m,b);\r\n      b.rShiftTo(1,b);\r\n    }\r\n    while(v.isEven()) {\r\n      v.rShiftTo(1,v);\r\n      if(ac) {\r\n        if(!c.isEven() || !d.isEven()) { c.addTo(this,c); d.subTo(m,d); }\r\n        c.rShiftTo(1,c);\r\n      }\r\n      else if(!d.isEven()) d.subTo(m,d);\r\n      d.rShiftTo(1,d);\r\n    }\r\n    if(u.compareTo(v) >= 0) {\r\n      u.subTo(v,u);\r\n      if(ac) a.subTo(c,a);\r\n      b.subTo(d,b);\r\n    }\r\n    else {\r\n      v.subTo(u,v);\r\n      if(ac) c.subTo(a,c);\r\n      d.subTo(b,d);\r\n    }\r\n  }\r\n  if(v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;\r\n  if(d.compareTo(m) >= 0) return d.subtract(m);\r\n  if(d.signum() < 0) d.addTo(m,d); else return d;\r\n  if(d.signum() < 0) return d.add(m); else return d;\r\n}\r\n\r\nvar lowprimes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509];\r\nvar lplim = (1<<26)/lowprimes[lowprimes.length-1];\r\n\r\n// (public) test primality with certainty >= 1-.5^t\r\nfunction bnIsProbablePrime(t) {\r\n  var i, x = this.abs();\r\n  if(x.t == 1 && x[0] <= lowprimes[lowprimes.length-1]) {\r\n    for(i = 0; i < lowprimes.length; ++i)\r\n      if(x[0] == lowprimes[i]) return true;\r\n    return false;\r\n  }\r\n  if(x.isEven()) return false;\r\n  i = 1;\r\n  while(i < lowprimes.length) {\r\n    var m = lowprimes[i], j = i+1;\r\n    while(j < lowprimes.length && m < lplim) m *= lowprimes[j++];\r\n    m = x.modInt(m);\r\n    while(i < j) if(m%lowprimes[i++] == 0) return false;\r\n  }\r\n  return x.millerRabin(t);\r\n}\r\n\r\n// (protected) true if probably prime (HAC 4.24, Miller-Rabin)\r\nfunction bnpMillerRabin(t) {\r\n  var n1 = this.subtract(BigInteger.ONE);\r\n  var k = n1.getLowestSetBit();\r\n  if(k <= 0) return false;\r\n  var r = n1.shiftRight(k);\r\n  t = (t+1)>>1;\r\n  if(t > lowprimes.length) t = lowprimes.length;\r\n  var a = nbi();\r\n  for(var i = 0; i < t; ++i) {\r\n    a.fromInt(lowprimes[i]);\r\n    var y = a.modPow(r,this);\r\n    if(y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {\r\n      var j = 1;\r\n      while(j++ < k && y.compareTo(n1) != 0) {\r\n        y = y.modPowInt(2,this);\r\n        if(y.compareTo(BigInteger.ONE) == 0) return false;\r\n      }\r\n      if(y.compareTo(n1) != 0) return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n// protected\r\nBigInteger.prototype.chunkSize = bnpChunkSize;\r\nBigInteger.prototype.toRadix = bnpToRadix;\r\nBigInteger.prototype.fromRadix = bnpFromRadix;\r\nBigInteger.prototype.fromNumber = bnpFromNumber;\r\nBigInteger.prototype.bitwiseTo = bnpBitwiseTo;\r\nBigInteger.prototype.changeBit = bnpChangeBit;\r\nBigInteger.prototype.addTo = bnpAddTo;\r\nBigInteger.prototype.dMultiply = bnpDMultiply;\r\nBigInteger.prototype.dAddOffset = bnpDAddOffset;\r\nBigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;\r\nBigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;\r\nBigInteger.prototype.modInt = bnpModInt;\r\nBigInteger.prototype.millerRabin = bnpMillerRabin;\r\n\r\n// public\r\nBigInteger.prototype.clone = bnClone;\r\nBigInteger.prototype.intValue = bnIntValue;\r\nBigInteger.prototype.byteValue = bnByteValue;\r\nBigInteger.prototype.shortValue = bnShortValue;\r\nBigInteger.prototype.signum = bnSigNum;\r\nBigInteger.prototype.toByteArray = bnToByteArray;\r\nBigInteger.prototype.equals = bnEquals;\r\nBigInteger.prototype.min = bnMin;\r\nBigInteger.prototype.max = bnMax;\r\nBigInteger.prototype.and = bnAnd;\r\nBigInteger.prototype.or = bnOr;\r\nBigInteger.prototype.xor = bnXor;\r\nBigInteger.prototype.andNot = bnAndNot;\r\nBigInteger.prototype.not = bnNot;\r\nBigInteger.prototype.shiftLeft = bnShiftLeft;\r\nBigInteger.prototype.shiftRight = bnShiftRight;\r\nBigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;\r\nBigInteger.prototype.bitCount = bnBitCount;\r\nBigInteger.prototype.testBit = bnTestBit;\r\nBigInteger.prototype.setBit = bnSetBit;\r\nBigInteger.prototype.clearBit = bnClearBit;\r\nBigInteger.prototype.flipBit = bnFlipBit;\r\nBigInteger.prototype.add = bnAdd;\r\nBigInteger.prototype.subtract = bnSubtract;\r\nBigInteger.prototype.multiply = bnMultiply;\r\nBigInteger.prototype.divide = bnDivide;\r\nBigInteger.prototype.remainder = bnRemainder;\r\nBigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;\r\nBigInteger.prototype.modPow = bnModPow;\r\nBigInteger.prototype.modInverse = bnModInverse;\r\nBigInteger.prototype.pow = bnPow;\r\nBigInteger.prototype.gcd = bnGCD;\r\nBigInteger.prototype.isProbablePrime = bnIsProbablePrime;\r\n\r\n// BigInteger interfaces not implemented in jsbn:\r\n\r\n// BigInteger(int signum, byte[] magnitude)\r\n// double doubleValue()\r\n// float floatValue()\r\n// int hashCode()\r\n// long longValue()\r\n// static BigInteger valueOf(long val)\r\n\r\n/// METEOR WRAPPER\r\nreturn BigInteger;\r\n})();\r\n","/// METEOR WRAPPER\r\n//\r\n// XXX this should get packaged and moved into the Meteor.crypto\r\n// namespace, along with other hash functions.\r\nSHA256 = (function () {\r\n\r\n\r\n/**\r\n*\r\n*  Secure Hash Algorithm (SHA256)\r\n*  http://www.webtoolkit.info/javascript-sha256.html\r\n*  http://anmar.eu.org/projects/jssha2/\r\n*\r\n*  Original code by Angel Marin, Paul Johnston.\r\n*\r\n**/\r\n \r\nfunction SHA256(s){\r\n \r\n\tvar chrsz   = 8;\r\n\tvar hexcase = 0;\r\n \r\n\tfunction safe_add (x, y) {\r\n\t\tvar lsw = (x & 0xFFFF) + (y & 0xFFFF);\r\n\t\tvar msw = (x >> 16) + (y >> 16) + (lsw >> 16);\r\n\t\treturn (msw << 16) | (lsw & 0xFFFF);\r\n\t}\r\n \r\n\tfunction S (X, n) { return ( X >>> n ) | (X << (32 - n)); }\r\n\tfunction R (X, n) { return ( X >>> n ); }\r\n\tfunction Ch(x, y, z) { return ((x & y) ^ ((~x) & z)); }\r\n\tfunction Maj(x, y, z) { return ((x & y) ^ (x & z) ^ (y & z)); }\r\n\tfunction Sigma0256(x) { return (S(x, 2) ^ S(x, 13) ^ S(x, 22)); }\r\n\tfunction Sigma1256(x) { return (S(x, 6) ^ S(x, 11) ^ S(x, 25)); }\r\n\tfunction Gamma0256(x) { return (S(x, 7) ^ S(x, 18) ^ R(x, 3)); }\r\n\tfunction Gamma1256(x) { return (S(x, 17) ^ S(x, 19) ^ R(x, 10)); }\r\n \r\n\tfunction core_sha256 (m, l) {\r\n\t\tvar K = new Array(0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5, 0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5, 0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3, 0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174, 0xE49B69C1, 0xEFBE4786, 0xFC19DC6, 0x240CA1CC, 0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA, 0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7, 0xC6E00BF3, 0xD5A79147, 0x6CA6351, 0x14292967, 0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13, 0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85, 0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3, 0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070, 0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5, 0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3, 0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208, 0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2);\r\n\t\tvar HASH = new Array(0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A, 0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19);\r\n\t\tvar W = new Array(64);\r\n\t\tvar a, b, c, d, e, f, g, h, i, j;\r\n\t\tvar T1, T2;\r\n \r\n\t\tm[l >> 5] |= 0x80 << (24 - l % 32);\r\n\t\tm[((l + 64 >> 9) << 4) + 15] = l;\r\n \r\n\t\tfor ( var i = 0; i<m.length; i+=16 ) {\r\n\t\t\ta = HASH[0];\r\n\t\t\tb = HASH[1];\r\n\t\t\tc = HASH[2];\r\n\t\t\td = HASH[3];\r\n\t\t\te = HASH[4];\r\n\t\t\tf = HASH[5];\r\n\t\t\tg = HASH[6];\r\n\t\t\th = HASH[7];\r\n \r\n\t\t\tfor ( var j = 0; j<64; j++) {\r\n\t\t\t\tif (j < 16) W[j] = m[j + i];\r\n\t\t\t\telse W[j] = safe_add(safe_add(safe_add(Gamma1256(W[j - 2]), W[j - 7]), Gamma0256(W[j - 15])), W[j - 16]);\r\n \r\n\t\t\t\tT1 = safe_add(safe_add(safe_add(safe_add(h, Sigma1256(e)), Ch(e, f, g)), K[j]), W[j]);\r\n\t\t\t\tT2 = safe_add(Sigma0256(a), Maj(a, b, c));\r\n \r\n\t\t\t\th = g;\r\n\t\t\t\tg = f;\r\n\t\t\t\tf = e;\r\n\t\t\t\te = safe_add(d, T1);\r\n\t\t\t\td = c;\r\n\t\t\t\tc = b;\r\n\t\t\t\tb = a;\r\n\t\t\t\ta = safe_add(T1, T2);\r\n\t\t\t}\r\n \r\n\t\t\tHASH[0] = safe_add(a, HASH[0]);\r\n\t\t\tHASH[1] = safe_add(b, HASH[1]);\r\n\t\t\tHASH[2] = safe_add(c, HASH[2]);\r\n\t\t\tHASH[3] = safe_add(d, HASH[3]);\r\n\t\t\tHASH[4] = safe_add(e, HASH[4]);\r\n\t\t\tHASH[5] = safe_add(f, HASH[5]);\r\n\t\t\tHASH[6] = safe_add(g, HASH[6]);\r\n\t\t\tHASH[7] = safe_add(h, HASH[7]);\r\n\t\t}\r\n\t\treturn HASH;\r\n\t}\r\n \r\n\tfunction str2binb (str) {\r\n\t\tvar bin = Array();\r\n\t\tvar mask = (1 << chrsz) - 1;\r\n\t\tfor(var i = 0; i < str.length * chrsz; i += chrsz) {\r\n\t\t\tbin[i>>5] |= (str.charCodeAt(i / chrsz) & mask) << (24 - i%32);\r\n\t\t}\r\n\t\treturn bin;\r\n\t}\r\n \r\n\tfunction Utf8Encode(string) {\r\n\t\t// METEOR change:\r\n\t\t// The webtoolkit.info version of this code added this\r\n\t\t// Utf8Encode function (which does seem necessary for dealing\r\n\t\t// with arbitrary Unicode), but the following line seems\r\n\t\t// problematic:\r\n\t\t//\r\n\t\t// string = string.replace(/\\r\\n/g,\"\\n\");\r\n\t\tvar utftext = \"\";\r\n \r\n\t\tfor (var n = 0; n < string.length; n++) {\r\n \r\n\t\t\tvar c = string.charCodeAt(n);\r\n \r\n\t\t\tif (c < 128) {\r\n\t\t\t\tutftext += String.fromCharCode(c);\r\n\t\t\t}\r\n\t\t\telse if((c > 127) && (c < 2048)) {\r\n\t\t\t\tutftext += String.fromCharCode((c >> 6) | 192);\r\n\t\t\t\tutftext += String.fromCharCode((c & 63) | 128);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tutftext += String.fromCharCode((c >> 12) | 224);\r\n\t\t\t\tutftext += String.fromCharCode(((c >> 6) & 63) | 128);\r\n\t\t\t\tutftext += String.fromCharCode((c & 63) | 128);\r\n\t\t\t}\r\n \r\n\t\t}\r\n \r\n\t\treturn utftext;\r\n\t}\r\n \r\n\tfunction binb2hex (binarray) {\r\n\t\tvar hex_tab = hexcase ? \"0123456789ABCDEF\" : \"0123456789abcdef\";\r\n\t\tvar str = \"\";\r\n\t\tfor(var i = 0; i < binarray.length * 4; i++) {\r\n\t\t\tstr += hex_tab.charAt((binarray[i>>2] >> ((3 - i%4)*8+4)) & 0xF) +\r\n\t\t\thex_tab.charAt((binarray[i>>2] >> ((3 - i%4)*8  )) & 0xF);\r\n\t\t}\r\n\t\treturn str;\r\n\t}\r\n \r\n\ts = Utf8Encode(s);\r\n\treturn binb2hex(core_sha256(str2binb(s), s.length * chrsz));\r\n \r\n}\r\n\r\n/// METEOR WRAPPER\r\nreturn SHA256;\r\n})();\r\n","SRP = {};\r\n\r\n/////// PUBLIC CLIENT\r\n\r\n/**\r\n * Generate a new SRP verifier. Password is the plaintext password.\r\n *\r\n * options is optional and can include:\r\n * - identity: String. The SRP username to user. Mostly this is passed\r\n *   in for testing.  Random UUID if not provided.\r\n * - salt: String. A salt to use.  Mostly this is passed in for\r\n *   testing.  Random UUID if not provided.\r\n * - SRP parameters (see _defaults and paramsFromOptions below)\r\n */\r\nSRP.generateVerifier = function (password, options) {\r\n  var params = paramsFromOptions(options);\r\n\r\n  var identity = (options && options.identity) || Random.secret();\r\n  var salt = (options && options.salt) || Random.secret();\r\n\r\n  var x = params.hash(salt + params.hash(identity + \":\" + password));\r\n  var xi = new BigInteger(x, 16);\r\n  var v = params.g.modPow(xi, params.N);\r\n\r\n\r\n  return {\r\n    identity: identity,\r\n    salt: salt,\r\n    verifier: v.toString(16)\r\n  };\r\n};\r\n\r\n// For use with check().\r\nSRP.matchVerifier = {\r\n  identity: String,\r\n  salt: String,\r\n  verifier: String\r\n};\r\n\r\n\r\n/**\r\n * Generate a new SRP client object. Password is the plaintext password.\r\n *\r\n * options is optional and can include:\r\n * - a: client's private ephemeral value. String or\r\n *      BigInteger. Normally, this is picked randomly, but it can be\r\n *      passed in for testing.\r\n * - SRP parameters (see _defaults and paramsFromOptions below)\r\n */\r\nSRP.Client = function (password, options) {\r\n  var self = this;\r\n  self.params = paramsFromOptions(options);\r\n  self.password = password;\r\n\r\n  // shorthand\r\n  var N = self.params.N;\r\n  var g = self.params.g;\r\n\r\n  // construct public and private keys.\r\n  var a, A;\r\n  if (options && options.a) {\r\n    if (typeof options.a === \"string\")\r\n      a = new BigInteger(options.a, 16);\r\n    else if (options.a instanceof BigInteger)\r\n      a = options.a;\r\n    else\r\n      throw new Error(\"Invalid parameter: a\");\r\n\r\n    A = g.modPow(a, N);\r\n\r\n    if (A.mod(N) === 0)\r\n      throw new Error(\"Invalid parameter: a: A mod N == 0.\");\r\n\r\n  } else {\r\n    while (!A || A.mod(N) === 0) {\r\n      a = randInt();\r\n      A = g.modPow(a, N);\r\n    }\r\n  }\r\n\r\n  self.a = a;\r\n  self.A = A;\r\n  self.Astr = A.toString(16);\r\n};\r\n\r\n\r\n/**\r\n * Initiate an SRP exchange.\r\n *\r\n * returns { A: 'client public ephemeral key. hex encoded integer.' }\r\n */\r\nSRP.Client.prototype.startExchange = function () {\r\n  var self = this;\r\n\r\n  return {\r\n    A: self.Astr\r\n  };\r\n};\r\n\r\n/**\r\n * Respond to the server's challenge with a proof of password.\r\n *\r\n * challenge is an object with\r\n * - B: server public ephemeral key. hex encoded integer.\r\n * - identity: user's identity (SRP username).\r\n * - salt: user's salt.\r\n *\r\n * returns { M: 'client proof of password. hex encoded integer.' }\r\n * throws an error if it got an invalid challenge.\r\n */\r\nSRP.Client.prototype.respondToChallenge = function (challenge) {\r\n  var self = this;\r\n\r\n  // shorthand\r\n  var N = self.params.N;\r\n  var g = self.params.g;\r\n  var k = self.params.k;\r\n  var H = self.params.hash;\r\n\r\n  // XXX check for missing / bad parameters.\r\n  self.identity = challenge.identity;\r\n  self.salt = challenge.salt;\r\n  self.Bstr = challenge.B;\r\n  self.B = new BigInteger(self.Bstr, 16);\r\n\r\n  if (self.B.mod(N) === 0)\r\n    throw new Error(\"Server sent invalid key: B mod N == 0.\");\r\n\r\n  var u = new BigInteger(H(self.Astr + self.Bstr), 16);\r\n  var x = new BigInteger(\r\n    H(self.salt + H(self.identity + \":\" + self.password)), 16);\r\n\r\n  var kgx = k.multiply(g.modPow(x, N));\r\n  var aux = self.a.add(u.multiply(x));\r\n  var S = self.B.subtract(kgx).modPow(aux, N);\r\n  var M = H(self.Astr + self.Bstr + S.toString(16));\r\n  var HAMK = H(self.Astr + M + S.toString(16));\r\n\r\n  self.S = S;\r\n  self.HAMK = HAMK;\r\n\r\n  return {\r\n    M: M\r\n  };\r\n};\r\n\r\n\r\n/**\r\n * Verify server's confirmation message.\r\n *\r\n * confirmation is an object with\r\n * - HAMK: server's proof of password.\r\n *\r\n * returns true or false.\r\n */\r\nSRP.Client.prototype.verifyConfirmation = function (confirmation) {\r\n  var self = this;\r\n\r\n  return (self.HAMK && (confirmation.HAMK === self.HAMK));\r\n};\r\n\r\n\r\n\r\n/////// PUBLIC SERVER\r\n\r\n\r\n/**\r\n * Generate a new SRP server object. Password is the plaintext password.\r\n *\r\n * options is optional and can include:\r\n * - b: server's private ephemeral value. String or\r\n *      BigInteger. Normally, this is picked randomly, but it can be\r\n *      passed in for testing.\r\n * - SRP parameters (see _defaults and paramsFromOptions below)\r\n */\r\nSRP.Server = function (verifier, options) {\r\n  var self = this;\r\n  self.params = paramsFromOptions(options);\r\n  self.verifier = verifier;\r\n\r\n  // shorthand\r\n  var N = self.params.N;\r\n  var g = self.params.g;\r\n  var k = self.params.k;\r\n  var v = new BigInteger(self.verifier.verifier, 16);\r\n\r\n  // construct public and private keys.\r\n  var b, B;\r\n  if (options && options.b) {\r\n    if (typeof options.b === \"string\")\r\n      b = new BigInteger(options.b, 16);\r\n    else if (options.b instanceof BigInteger)\r\n      b = options.b;\r\n    else\r\n      throw new Error(\"Invalid parameter: b\");\r\n\r\n    B = k.multiply(v).add(g.modPow(b, N)).mod(N);\r\n\r\n    if (B.mod(N) === 0)\r\n      throw new Error(\"Invalid parameter: b: B mod N == 0.\");\r\n\r\n  } else {\r\n    while (!B || B.mod(N) === 0) {\r\n      b = randInt();\r\n      B = k.multiply(v).add(g.modPow(b, N)).mod(N);\r\n    }\r\n  }\r\n\r\n  self.b = b;\r\n  self.B = B;\r\n  self.Bstr = B.toString(16);\r\n\r\n};\r\n\r\n\r\n/**\r\n * Issue a challenge to the client.\r\n *\r\n * Takes a request from the client containing:\r\n * - A: hex encoded int.\r\n *\r\n * Returns a challenge with:\r\n * - B: server public ephemeral key. hex encoded integer.\r\n * - identity: user's identity (SRP username).\r\n * - salt: user's salt.\r\n *\r\n * Throws an error if issued a bad request.\r\n */\r\nSRP.Server.prototype.issueChallenge = function (request) {\r\n  var self = this;\r\n\r\n  // XXX check for missing / bad parameters.\r\n  self.Astr = request.A;\r\n  self.A = new BigInteger(self.Astr, 16);\r\n\r\n  if (self.A.mod(self.params.N) === 0)\r\n    throw new Error(\"Client sent invalid key: A mod N == 0.\");\r\n\r\n  // shorthand\r\n  var N = self.params.N;\r\n  var H = self.params.hash;\r\n\r\n  // Compute M and HAMK in advance. Don't send to client yet.\r\n  var u = new BigInteger(H(self.Astr + self.Bstr), 16);\r\n  var v = new BigInteger(self.verifier.verifier, 16);\r\n  var avu = self.A.multiply(v.modPow(u, N));\r\n  self.S = avu.modPow(self.b, N);\r\n  self.M = H(self.Astr + self.Bstr + self.S.toString(16));\r\n  self.HAMK = H(self.Astr + self.M + self.S.toString(16));\r\n\r\n  return {\r\n    identity: self.verifier.identity,\r\n    salt: self.verifier.salt,\r\n    B: self.Bstr\r\n  };\r\n};\r\n\r\n\r\n/**\r\n * Verify a response from the client and return confirmation.\r\n *\r\n * Takes a challenge response from the client containing:\r\n * - M: client proof of password. hex encoded int.\r\n *\r\n * Returns a confirmation if the client's proof is good:\r\n * - HAMK: server proof of password. hex encoded integer.\r\n * OR null if the client's proof doesn't match.\r\n */\r\nSRP.Server.prototype.verifyResponse = function (response) {\r\n  var self = this;\r\n\r\n  if (response.M !== self.M)\r\n    return null;\r\n\r\n  return {\r\n    HAMK: self.HAMK\r\n  };\r\n};\r\n\r\n\r\n\r\n/////// INTERNAL\r\n\r\n/**\r\n * Default parameter values for SRP.\r\n *\r\n */\r\nvar _defaults = {\r\n  hash: function (x) { return SHA256(x).toLowerCase(); },\r\n  N: new BigInteger(\"EEAF0AB9ADB38DD69C33F80AFA8FC5E86072618775FF3C0B9EA2314C9C256576D674DF7496EA81D3383B4813D692C6E0E0D5D8E250B98BE48E495C1D6089DAD15DC7D7B46154D6B6CE8EF4AD69B15D4982559B297BCF1885C529F566660E57EC68EDBC3C05726CC02FD4CBF4976EAA9AFD5138FE8376435B9FC61D2FC0EB06E3\", 16),\r\n  g: new BigInteger(\"2\")\r\n};\r\n_defaults.k = new BigInteger(\r\n  _defaults.hash(\r\n    _defaults.N.toString(16) +\r\n      _defaults.g.toString(16)),\r\n  16);\r\n\r\n/**\r\n * Process an options hash to create SRP parameters.\r\n *\r\n * Options can include:\r\n * - hash: Function. Defaults to SHA256.\r\n * - N: String or BigInteger. Defaults to 1024 bit value from RFC 5054\r\n * - g: String or BigInteger. Defaults to 2.\r\n * - k: String or BigInteger. Defaults to hash(N, g)\r\n */\r\nvar paramsFromOptions = function (options) {\r\n  if (!options) // fast path\r\n    return _defaults;\r\n\r\n  var ret = _.extend({}, _defaults);\r\n\r\n  _.each(['N', 'g', 'k'], function (p) {\r\n    if (options[p]) {\r\n      if (typeof options[p] === \"string\")\r\n        ret[p] = new BigInteger(options[p], 16);\r\n      else if (options[p] instanceof BigInteger)\r\n        ret[p] = options[p];\r\n      else\r\n        throw new Error(\"Invalid parameter: \" + p);\r\n    }\r\n  });\r\n\r\n  if (options.hash)\r\n    ret.hash = function (x) { return options.hash(x).toLowerCase(); };\r\n\r\n  if (!options.k && (options.N || options.g || options.hash)) {\r\n    ret.k = ret.hash(ret.N.toString(16) + ret.g.toString(16));\r\n  }\r\n\r\n  return ret;\r\n};\r\n\r\n\r\nvar randInt = function () {\r\n  return new BigInteger(Random.hexString(36), 16);\r\n};\r\n"]}