{"version":3,"file":"\\packages\\google.js","sources":["google/google_server.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,Y;;AAEA,uE;AACA,kF;AACA,6E;;;AAGA,0D;;AAEA,kC;AACA,yC;AACA,0C;;AAEA,qB;AACA,6B;AACA,wD;AACA,I;;AAEA,0D;AACA,gC;;AAEA,kE;AACA,qE;AACA,oB;AACA,4B;AACA,qD;;AAEA,U;AACA,6B;AACA,6C;AACA,I;AACA,G;;AAEA,gC;AACA,gB;AACA,4C;AACA,6D;AACA,kC;AACA,gF;AACA,c;AACA,iD;;AAEA,e;AACA,O;AACA,yB;AACA,8D;AACA,yB;AACA,mC;AACA,uD;AACA,gE;AACA,wC;AACA,U;AACA,iB;AACA,+F;AACA,6C;AACA,G;;AAEA,8F;AACA,8F;AACA,U;AACA,Y;AACA,8C;AACA,gD;AACA,yC;AACA,M;AACA,G;AACA,E;;AAEA,0C;AACA,O;AACA,oB;AACA,sD;AACA,kD;AACA,iB;AACA,qF;AACA,6C;AACA,G;AACA,E;;;AAGA,yE;AACA,qE;AACA,E","sourcesContent":["Google = {};\r\n\r\n// https://developers.google.com/accounts/docs/OAuth2Login#userinfocall\r\nGoogle.whitelistedFields = ['id', 'email', 'verified_email', 'name', 'given_name',\r\n                   'family_name', 'picture', 'locale', 'timezone', 'gender'];\r\n\r\n\r\nOAuth.registerService('google', 2, null, function(query) {\r\n\r\n  var response = getTokens(query);\r\n  var accessToken = response.accessToken;\r\n  var identity = getIdentity(accessToken);\r\n\r\n  var serviceData = {\r\n    accessToken: accessToken,\r\n    expiresAt: (+new Date) + (1000 * response.expiresIn)\r\n  };\r\n\r\n  var fields = _.pick(identity, Google.whitelistedFields);\r\n  _.extend(serviceData, fields);\r\n\r\n  // only set the token in serviceData if it's there. this ensures\r\n  // that we don't lose old ones (since we only get this on the first\r\n  // log in attempt)\r\n  if (response.refreshToken)\r\n    serviceData.refreshToken = response.refreshToken;\r\n\r\n  return {\r\n    serviceData: serviceData,\r\n    options: {profile: {name: identity.name}}\r\n  };\r\n});\r\n\r\n// returns an object containing:\r\n// - accessToken\r\n// - expiresIn: lifetime of token in seconds\r\n// - refreshToken, if this is the first authorization request\r\nvar getTokens = function (query) {\r\n  var config = ServiceConfiguration.configurations.findOne({service: 'google'});\r\n  if (!config)\r\n    throw new ServiceConfiguration.ConfigError();\r\n\r\n  var response;\r\n  try {\r\n    response = HTTP.post(\r\n      \"https://accounts.google.com/o/oauth2/token\", {params: {\r\n        code: query.code,\r\n        client_id: config.clientId,\r\n        client_secret: OAuth.openSecret(config.secret),\r\n        redirect_uri: Meteor.absoluteUrl(\"_oauth/google?close\"),\r\n        grant_type: 'authorization_code'\r\n      }});\r\n  } catch (err) {\r\n    throw _.extend(new Error(\"Failed to complete OAuth handshake with Google. \" + err.message),\r\n                   {response: err.response});\r\n  }\r\n\r\n  if (response.data.error) { // if the http response was a json object with an error attribute\r\n    throw new Error(\"Failed to complete OAuth handshake with Google. \" + response.data.error);\r\n  } else {\r\n    return {\r\n      accessToken: response.data.access_token,\r\n      refreshToken: response.data.refresh_token,\r\n      expiresIn: response.data.expires_in\r\n    };\r\n  }\r\n};\r\n\r\nvar getIdentity = function (accessToken) {\r\n  try {\r\n    return HTTP.get(\r\n      \"https://www.googleapis.com/oauth2/v1/userinfo\",\r\n      {params: {access_token: accessToken}}).data;\r\n  } catch (err) {\r\n    throw _.extend(new Error(\"Failed to fetch identity from Google. \" + err.message),\r\n                   {response: err.response});\r\n  }\r\n};\r\n\r\n\r\nGoogle.retrieveCredential = function(credentialToken, credentialSecret) {\r\n  return OAuth.retrieveCredential(credentialToken, credentialSecret);\r\n};\r\n"]}