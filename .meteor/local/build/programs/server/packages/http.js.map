{"version":3,"file":"\\packages\\http.js","sources":["http/httpcall_common.js","http/httpcall_server.js","http/deprecated.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,mD;AACA,+E;;AAEA,wC;AACA,oE;AACA,I;;AAEA,8C;AACA,c;AACA,uE;;AAEA,4B;AACA,E;;AAEA,iC;AACA,e;AACA,uC;AACA,mB;AACA,oB;AACA,0D;AACA,K;AACA,2C;AACA,E;;AAEA,8B;AACA,kF;AACA,E;;AAEA,sE;AACA,uC;AACA,sD;;AAEA,oC;AACA,8B;;AAEA,mB;AACA,wB;AACA,wC;AACA,sB;AACA,mB;AACA,kB;AACA,G;;AAEA,8B;AACA,qB;AACA,uB;;AAEA,a;AACA,E;;AAEA,uD;AACA,mC;AACA,2D;AACA,gE;AACA,gC;AACA,4E;;AAEA,wE;AACA,wE;AACA,S;AACA,mD;AACA,mB;AACA,2B;AACA,K;AACA,U;AACA,yB;AACA,G;AACA,E;;AAEA,U;;AAEA,qC;AACA,qE;AACA,E;;AAEA,sC;AACA,sE;AACA,E;;AAEA,qC;AACA,qE;AACA,E;;AAEA,qC;AACA,wE;AACA,E;;;;;;;;;;;;;;;;;;;ACrFA,+B;AACA,qC;AACA,kC;;AAEA,8D;AACA,mE;AACA,sD;;AAEA,yC;;AAEA,oD;AACA,oD;AACA,uB;AACA,mB;AACA,G;;AAEA,0B;;AAEA,wC;;AAEA,iC;AACA,+E;;AAEA,sC;;AAEA,mB;;AAEA,gC;AACA,qB;AACA,2C;AACA,iD;AACA,G;;;AAGA,sC;AACA,uD;AACA,oC;AACA,M;AACA,qC;;AAEA,yB;AACA,oE;AACA,qD;;AAEA,qB;AACA,sC;AACA,+E;AACA,wC;AACA,6D;AACA,G;;AAEA,wB;AACA,4C;AACA,kE;AACA,G;;AAEA,2C;;AAEA,oE;AACA,oE;AACA,kC;AACA,sC;AACA,4B;AACA,kC;AACA,gC;AACA,M;AACA,e;;AAEA,8C;AACA,8B;;;AAGA,gC;;AAEA,qB;AACA,iB;AACA,mB;AACA,qB;AACA,e;AACA,6B;AACA,kB;AACA,4C;AACA,oB;AACA,I;;AAEA,mD;AACA,wB;;AAEA,kB;;AAEA,oB;AACA,2C;AACA,8B;AACA,qC;;AAEA,6B;;AAEA,qC;AACA,yE;AACA,K;;AAEA,8B;;AAEA,K;AACA,E;;AAEA,qC;;;;;;;;;;;;;;;;;;;AC1GA,iD;AACA,wB;AACA,mB","sourcesContent":["makeErrorByStatus = function(statusCode, content) {\r\n  var MAX_LENGTH = 500; // if you change this, also change the appropriate test\r\n\r\n  var truncate = function(str, length) {\r\n    return str.length > length ? str.slice(0, length) + '...' : str;\r\n  };\r\n\r\n  var message = \"failed [\" + statusCode + \"]\";\r\n  if (content)\r\n    message += \" \" + truncate(content.replace(/\\n/g, \" \"), MAX_LENGTH);\r\n\r\n  return new Error(message);\r\n};\r\n\r\nencodeParams = function(params) {\r\n  var buf = [];\r\n  _.each(params, function(value, key) {\r\n    if (buf.length)\r\n      buf.push('&');\r\n    buf.push(encodeString(key), '=', encodeString(value));\r\n  });\r\n  return buf.join('').replace(/%20/g, '+');\r\n};\r\n\r\nencodeString = function(str) {\r\n  return encodeURIComponent(str).replace(/[!'()]/g, escape).replace(/\\*/g, \"%2A\");\r\n};\r\n\r\nbuildUrl = function(before_qmark, from_qmark, opt_query, opt_params) {\r\n  var url_without_query = before_qmark;\r\n  var query = from_qmark ? from_qmark.slice(1) : null;\r\n\r\n  if (typeof opt_query === \"string\")\r\n    query = String(opt_query);\r\n\r\n  if (opt_params) {\r\n    query = query || \"\";\r\n    var prms = encodeParams(opt_params);\r\n    if (query && prms)\r\n      query += '&';\r\n    query += prms;\r\n  }\r\n\r\n  var url = url_without_query;\r\n  if (query !== null)\r\n    url += (\"?\"+query);\r\n\r\n  return url;\r\n};\r\n\r\n// Fill in `response.data` if the content-type is JSON.\r\npopulateData = function(response) {\r\n  // Read Content-Type header, up to a ';' if there is one.\r\n  // A typical header might be \"application/json; charset=utf-8\"\r\n  // or just \"application/json\".\r\n  var contentType = (response.headers['content-type'] || ';').split(';')[0];\r\n\r\n  // Only try to parse data as JSON if server sets correct content type.\r\n  if (_.include(['application/json', 'text/javascript'], contentType)) {\r\n    try {\r\n      response.data = JSON.parse(response.content);\r\n    } catch (err) {\r\n      response.data = null;\r\n    }\r\n  } else {\r\n    response.data = null;\r\n  }\r\n};\r\n\r\nHTTP = {};\r\n\r\nHTTP.get = function (/* varargs */) {\r\n  return HTTP.call.apply(this, [\"GET\"].concat(_.toArray(arguments)));\r\n};\r\n\r\nHTTP.post = function (/* varargs */) {\r\n  return HTTP.call.apply(this, [\"POST\"].concat(_.toArray(arguments)));\r\n};\r\n\r\nHTTP.put = function (/* varargs */) {\r\n  return HTTP.call.apply(this, [\"PUT\"].concat(_.toArray(arguments)));\r\n};\r\n\r\nHTTP.del = function (/* varargs */) {\r\n  return HTTP.call.apply(this, [\"DELETE\"].concat(_.toArray(arguments)));\r\n};\r\n","var path = Npm.require('path');\r\nvar request = Npm.require('request');\r\nvar url_util = Npm.require('url');\r\n\r\n// _call always runs asynchronously; HTTP.call, defined below,\r\n// wraps _call and runs synchronously when no callback is provided.\r\nvar _call = function(method, url, options, callback) {\r\n\r\n  ////////// Process arguments //////////\r\n\r\n  if (! callback && typeof options === \"function\") {\r\n    // support (method, url, callback) argument list\r\n    callback = options;\r\n    options = null;\r\n  }\r\n\r\n  options = options || {};\r\n\r\n  method = (method || \"\").toUpperCase();\r\n\r\n  if (! /^https?:\\/\\//.test(url))\r\n    throw new Error(\"url must be absolute and start with http:// or https://\");\r\n\r\n  var url_parts = url_util.parse(url);\r\n\r\n  var headers = {};\r\n\r\n  var content = options.content;\r\n  if (options.data) {\r\n    content = JSON.stringify(options.data);\r\n    headers['Content-Type'] = 'application/json';\r\n  }\r\n\r\n\r\n  var params_for_url, params_for_body;\r\n  if (content || method === \"GET\" || method === \"HEAD\")\r\n    params_for_url = options.params;\r\n  else\r\n    params_for_body = options.params;\r\n\r\n  var new_url = buildUrl(\r\n    url_parts.protocol + \"//\" + url_parts.host + url_parts.pathname,\r\n    url_parts.search, options.query, params_for_url);\r\n\r\n  if (options.auth) {\r\n    if (options.auth.indexOf(':') < 0)\r\n      throw new Error('auth option should be of the form \"username:password\"');\r\n    headers['Authorization'] = \"Basic \"+\r\n      (new Buffer(options.auth, \"ascii\")).toString(\"base64\");\r\n  }\r\n\r\n  if (params_for_body) {\r\n    content = encodeParams(params_for_body);\r\n    headers['Content-Type'] = \"application/x-www-form-urlencoded\";\r\n  }\r\n\r\n  _.extend(headers, options.headers || {});\r\n\r\n  // wrap callback to add a 'response' property on an error, in case\r\n  // we have both (http 4xx/5xx error, which has a response payload)\r\n  callback = (function(callback) {\r\n    return function(error, response) {\r\n      if (error && response)\r\n        error.response = response;\r\n      callback(error, response);\r\n    };\r\n  })(callback);\r\n\r\n  // safety belt: only call the callback once.\r\n  callback = _.once(callback);\r\n\r\n\r\n  ////////// Kickoff! //////////\r\n\r\n  var req_options = {\r\n    url: new_url,\r\n    method: method,\r\n    encoding: \"utf8\",\r\n    jar: false,\r\n    timeout: options.timeout,\r\n    body: content,\r\n    followRedirect: options.followRedirects,\r\n    headers: headers\r\n  };\r\n\r\n  request(req_options, function(error, res, body) {\r\n    var response = null;\r\n\r\n    if (! error) {\r\n\r\n      response = {};\r\n      response.statusCode = res.statusCode;\r\n      response.content = body;\r\n      response.headers = res.headers;\r\n\r\n      populateData(response);\r\n\r\n      if (response.statusCode >= 400)\r\n        error = makeErrorByStatus(response.statusCode, response.content);\r\n    }\r\n\r\n    callback(error, response);\r\n\r\n  });\r\n};\r\n\r\nHTTP.call = Meteor._wrapAsync(_call);\r\n","// The HTTP object used to be called Meteor.http.\r\n// XXX COMPAT WITH 0.6.4\r\nMeteor.http = HTTP;\r\n"]}