{"version":3,"file":"\\packages\\facebook.js","sources":["facebook/facebook_server.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,c;;AAEA,6C;;;AAGA,4D;;AAEA,yC;AACA,yC;AACA,0C;;AAEA,qB;AACA,6B;AACA,wD;AACA,I;;AAEA,qC;AACA,wF;AACA,yD;AACA,wE;;AAEA,6C;AACA,gC;;AAEA,U;AACA,6B;AACA,6C;AACA,I;AACA,G;;AAEA,yC;AACA,6B;AACA,O;AACA,oB;AACA,gB;AACA,e;AACA,iB;AACA,G;AACA,E;;AAEA,gC;AACA,gB;AACA,4C;AACA,yC;AACA,kF;AACA,c;AACA,iD;;AAEA,sB;AACA,O;AACA,8B;AACA,+B;AACA,wD;AACA,iB;AACA,kC;AACA,oE;AACA,yD;AACA,0B;AACA,S;AACA,iB;AACA,iB;AACA,iG;AACA,6C;AACA,G;;AAEA,yD;AACA,mD;AACA,gC;AACA,4F;AACA,G;;AAEA,+D;AACA,2B;AACA,0D;AACA,kD;AACA,yC;;AAEA,uB;AACA,yE;AACA,uF;AACA,G;AACA,U;AACA,+B;AACA,wB;AACA,I;AACA,E;;AAEA,0C;AACA,O;AACA,sD;AACA,iD;AACA,iB;AACA,uF;AACA,6C;AACA,G;AACA,E;;AAEA,2E;AACA,qE;AACA,E","sourcesContent":["Facebook = {};\r\n\r\nvar querystring = Npm.require('querystring');\r\n\r\n\r\nOAuth.registerService('facebook', 2, null, function(query) {\r\n\r\n  var response = getTokenResponse(query);\r\n  var accessToken = response.accessToken;\r\n  var identity = getIdentity(accessToken);\r\n\r\n  var serviceData = {\r\n    accessToken: accessToken,\r\n    expiresAt: (+new Date) + (1000 * response.expiresIn)\r\n  };\r\n\r\n  // include all fields from facebook\r\n  // http://developers.facebook.com/docs/reference/login/public-profile-and-friend-list/\r\n  var whitelisted = ['id', 'email', 'name', 'first_name',\r\n      'last_name', 'link', 'username', 'gender', 'locale', 'age_range'];\r\n\r\n  var fields = _.pick(identity, whitelisted);\r\n  _.extend(serviceData, fields);\r\n\r\n  return {\r\n    serviceData: serviceData,\r\n    options: {profile: {name: identity.name}}\r\n  };\r\n});\r\n\r\n// checks whether a string parses as JSON\r\nvar isJSON = function (str) {\r\n  try {\r\n    JSON.parse(str);\r\n    return true;\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n};\r\n\r\n// returns an object containing:\r\n// - accessToken\r\n// - expiresIn: lifetime of token in seconds\r\nvar getTokenResponse = function (query) {\r\n  var config = ServiceConfiguration.configurations.findOne({service: 'facebook'});\r\n  if (!config)\r\n    throw new ServiceConfiguration.ConfigError();\r\n\r\n  var responseContent;\r\n  try {\r\n    // Request an access token\r\n    responseContent = HTTP.get(\r\n      \"https://graph.facebook.com/oauth/access_token\", {\r\n        params: {\r\n          client_id: config.appId,\r\n          redirect_uri: Meteor.absoluteUrl(\"_oauth/facebook?close\"),\r\n          client_secret: OAuth.openSecret(config.secret),\r\n          code: query.code\r\n        }\r\n      }).content;\r\n  } catch (err) {\r\n    throw _.extend(new Error(\"Failed to complete OAuth handshake with Facebook. \" + err.message),\r\n                   {response: err.response});\r\n  }\r\n\r\n  // If 'responseContent' parses as JSON, it is an error.\r\n  // XXX which facebook error causes this behvaior?\r\n  if (isJSON(responseContent)) {\r\n    throw new Error(\"Failed to complete OAuth handshake with Facebook. \" + responseContent);\r\n  }\r\n\r\n  // Success!  Extract the facebook access token and expiration\r\n  // time from the response\r\n  var parsedResponse = querystring.parse(responseContent);\r\n  var fbAccessToken = parsedResponse.access_token;\r\n  var fbExpires = parsedResponse.expires;\r\n\r\n  if (!fbAccessToken) {\r\n    throw new Error(\"Failed to complete OAuth handshake with facebook \" +\r\n                    \"-- can't find access token in HTTP response. \" + responseContent);\r\n  }\r\n  return {\r\n    accessToken: fbAccessToken,\r\n    expiresIn: fbExpires\r\n  };\r\n};\r\n\r\nvar getIdentity = function (accessToken) {\r\n  try {\r\n    return HTTP.get(\"https://graph.facebook.com/me\", {\r\n      params: {access_token: accessToken}}).data;\r\n  } catch (err) {\r\n    throw _.extend(new Error(\"Failed to fetch identity from Facebook. \" + err.message),\r\n                   {response: err.response});\r\n  }\r\n};\r\n\r\nFacebook.retrieveCredential = function(credentialToken, credentialSecret) {\r\n  return OAuth.retrieveCredential(credentialToken, credentialSecret);\r\n};\r\n"]}