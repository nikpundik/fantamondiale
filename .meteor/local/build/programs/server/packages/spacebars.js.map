{"version":3,"file":"\\packages\\spacebars.js","sources":["spacebars/spacebars-runtime.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,e;;AAEA,iF;AACA,U;AACA,mF;AACA,qD;AACA,sG;AACA,6D;AACA,qG;;AAEA,mB;AACA,qB;AACA,0B;AACA,mC;AACA,G;AACA,yB;AACA,0B;AACA,2C;AACA,G;;AAEA,yC;AACA,4C;;AAEA,gC;;AAEA,uB;AACA,oE;AACA,0B;AACA,yB;AACA,M;AACA,6B;;AAEA,sB;AACA,kB;AACA,+B;AACA,2G;;AAEA,8B;AACA,I;;AAEA,W;AACA,E;;AAEA,+D;AACA,2D;AACA,2B;AACA,E;AACA,oD;AACA,oE;AACA,U;AACA,qD;AACA,uB;AACA,kE;AACA,wB;AACA,wB;AACA,mC;AACA,yC;AACA,0B;AACA,wD;AACA,6B;AACA,mD;AACA,oB;AACA,Y;AACA,yD;AACA,uB;AACA,8B;AACA,2B;AACA,yD;AACA,O;AACA,oD;AACA,K;AACA,G;;AAEA,0C;AACA,E;;AAEA,iD;AACA,6D;;AAEA,6C;AACA,uC;AACA,M;AACA,uE;AACA,kE;AACA,6E;AACA,wE;AACA,E;;AAEA,qD;AACA,6D;;AAEA,wC;AACA,gB;AACA,0C;AACA,kB;AACA,+E;AACA,iB;AACA,qB;AACA,e;AACA,U;AACA,0E;AACA,G;AACA,E;;AAEA,qD;AACA,6D;;AAEA,gB;AACA,E;;AAEA,mC;AACA,E;AACA,mE;AACA,qD;AACA,sC;AACA,yC;AACA,gB;AACA,qC;AACA,iB;AACA,M;AACA,2B;AACA,E;;AAEA,2D;AACA,8D;AACA,iE;AACA,sB;AACA,6C;AACA,oC;AACA,iE;AACA,qB;AACA,gD;AACA,6B;AACA,+D;AACA,K;;AAEA,sC;AACA,U;AACA,6B;AACA,2D;;AAEA,iB;AACA,G;AACA,E;;AAEA,0D;AACA,gC;AACA,gC;AACA,uC;AACA,wC;AACA,kC;;AAEA,yB;AACA,E;;AAEA,sE;AACA,gF;AACA,wC;AACA,+C;AACA,wC;AACA,0C;;AAEA,yC;AACA,E;AACA,iE;;AAEA,6D;AACA,2D;AACA,4D;AACA,4D;AACA,2D;AACA,W;AACA,E;AACA,gE;AACA,qE;AACA,oE;AACA,E;AACA,4D;AACA,E;AACA,qC;AACA,E;AACA,4D;AACA,E;AACA,yC;AACA,E;AACA,8D;AACA,qD;AACA,6B;AACA,mE;AACA,qC;AACA,4B;AACA,mD;AACA,6C;AACA,wE;AACA,qD;AACA,G;;AAEA,kC;AACA,oB;;AAEA,c;AACA,qD;;AAEA,0B;AACA,mC;AACA,kB;AACA,oD;AACA,mE;AACA,mC;AACA,0C;AACA,I;AACA,E;;AAEA,wE;AACA,4B;AACA,qE;AACA,8B;AACA,uB;AACA,qD;AACA,M;AACA,yB;AACA,4E;AACA,M;AACA,gC;AACA,2B;AACA,wB;AACA,0B;AACA,yC;AACA,0B;AACA,a;AACA,S;AACA,Q;AACA,sB;AACA,e;AACA,Q;AACA,K;AACA,E;;AAEA,2D;AACA,yC;AACA,4B;AACA,W;AACA,E","sourcesContent":["Spacebars = {};\r\n\r\n// * `templateOrFunction` - template (component) or function returning a template\r\n// or null\r\nSpacebars.include = function (templateOrFunction, contentBlock, elseContentBlock) {\r\n  if (contentBlock && ! UI.isComponent(contentBlock))\r\n    throw new Error('Second argument to Spacebars.include must be a template or UI.block if present');\r\n  if (elseContentBlock && ! UI.isComponent(elseContentBlock))\r\n    throw new Error('Third argument to Spacebars.include must be a template or UI.block if present');\r\n\r\n  var props = null;\r\n  if (contentBlock) {\r\n    props = (props || {});\r\n    props.__content = contentBlock;\r\n  }\r\n  if (elseContentBlock) {\r\n    props = (props || {});\r\n    props.__elseContent = elseContentBlock;\r\n  }\r\n\r\n  if (UI.isComponent(templateOrFunction))\r\n    return templateOrFunction.extend(props);\r\n\r\n  var func = templateOrFunction;\r\n\r\n  var f = function () {\r\n    var emboxedFunc = UI.namedEmboxValue('Spacebars.include', func);\r\n    f.stop = function () {\r\n      emboxedFunc.stop();\r\n    };\r\n    var tmpl = emboxedFunc();\r\n\r\n    if (tmpl === null)\r\n      return null;\r\n    if (! UI.isComponent(tmpl))\r\n      throw new Error(\"Expected null or template in return value from inclusion function, found: \" + tmpl);\r\n\r\n    return tmpl.extend(props);\r\n  };\r\n\r\n  return f;\r\n};\r\n\r\n// Executes `{{foo bar baz}}` when called on `(foo, bar, baz)`.\r\n// If `bar` and `baz` are functions, they are called before\r\n// `foo` is called on them.\r\n//\r\n// This is the shared part of Spacebars.mustache and\r\n// Spacebars.attrMustache, which differ in how they post-process the\r\n// result.\r\nSpacebars.mustacheImpl = function (value/*, args*/) {\r\n  var args = arguments;\r\n  // if we have any arguments (pos or kw), add an options argument\r\n  // if there isn't one.\r\n  if (args.length > 1) {\r\n    var kw = args[args.length - 1];\r\n    if (! (kw instanceof Spacebars.kw)) {\r\n      kw = Spacebars.kw();\r\n      // clone arguments into an actual array, then push\r\n      // the empty kw object.\r\n      args = Array.prototype.slice.call(arguments);\r\n      args.push(kw);\r\n    } else {\r\n      // For each keyword arg, call it if it's a function\r\n      var newHash = {};\r\n      for (var k in kw.hash) {\r\n        var v = kw.hash[k];\r\n        newHash[k] = (typeof v === 'function' ? v() : v);\r\n      }\r\n      args[args.length - 1] = Spacebars.kw(newHash);\r\n    }\r\n  }\r\n\r\n  return Spacebars.call.apply(null, args);\r\n};\r\n\r\nSpacebars.mustache = function (value/*, args*/) {\r\n  var result = Spacebars.mustacheImpl.apply(null, arguments);\r\n\r\n  if (result instanceof Spacebars.SafeString)\r\n    return HTML.Raw(result.toString());\r\n  else\r\n    // map `null`, `undefined`, and `false` to null, which is important\r\n    // so that attributes with nully values are considered absent.\r\n    // stringify anything else (e.g. strings, booleans, numbers including 0).\r\n    return (result == null || result === false) ? null : String(result);\r\n};\r\n\r\nSpacebars.attrMustache = function (value/*, args*/) {\r\n  var result = Spacebars.mustacheImpl.apply(null, arguments);\r\n\r\n  if (result == null || result === '') {\r\n    return null;\r\n  } else if (typeof result === 'object') {\r\n    return result;\r\n  } else if (typeof result === 'string' && HTML.isValidAttributeName(result)) {\r\n    var obj = {};\r\n    obj[result] = '';\r\n    return obj;\r\n  } else {\r\n    throw new Error(\"Expected valid attribute name, '', null, or object\");\r\n  }\r\n};\r\n\r\nSpacebars.dataMustache = function (value/*, args*/) {\r\n  var result = Spacebars.mustacheImpl.apply(null, arguments);\r\n\r\n  return result;\r\n};\r\n\r\n// Idempotently wrap in `HTML.Raw`.\r\n//\r\n// Called on the return value from `Spacebars.mustache` in case the\r\n// template uses triple-stache (`{{{foo bar baz}}}`).\r\nSpacebars.makeRaw = function (value) {\r\n  if (value == null) // null or undefined\r\n    return null;\r\n  else if (value instanceof HTML.Raw)\r\n    return value;\r\n  else\r\n    return HTML.Raw(value);\r\n};\r\n\r\n// If `value` is a function, called it on the `args`, after\r\n// evaluating the args themselves (by calling them if they are\r\n// functions).  Otherwise, simply return `value` (and assert that\r\n// there are no args).\r\nSpacebars.call = function (value/*, args*/) {\r\n  if (typeof value === 'function') {\r\n    // evaluate arguments if they are functions (by calling them)\r\n    var newArgs = [];\r\n    for (var i = 1; i < arguments.length; i++) {\r\n      var arg = arguments[i];\r\n      newArgs[i-1] = (typeof arg === 'function' ? arg() : arg);\r\n    }\r\n\r\n    return value.apply(null, newArgs);\r\n  } else {\r\n    if (arguments.length > 1)\r\n      throw new Error(\"Can't call non-function: \" + value);\r\n\r\n    return value;\r\n  }\r\n};\r\n\r\n// Call this as `Spacebars.kw({ ... })`.  The return value\r\n// is `instanceof Spacebars.kw`.\r\nSpacebars.kw = function (hash) {\r\n  if (! (this instanceof Spacebars.kw))\r\n    // called without new; call with new\r\n    return new Spacebars.kw(hash);\r\n\r\n  this.hash = hash || {};\r\n};\r\n\r\n// Call this as `Spacebars.SafeString(\"some HTML\")`.  The return value\r\n// is `instanceof Spacebars.SafeString` (and `instanceof Handlebars.SafeString).\r\nSpacebars.SafeString = function (html) {\r\n  if (! (this instanceof Spacebars.SafeString))\r\n    // called without new; call with new\r\n    return new Spacebars.SafeString(html);\r\n\r\n  return new Handlebars.SafeString(html);\r\n};\r\nSpacebars.SafeString.prototype = Handlebars.SafeString.prototype;\r\n\r\n// `Spacebars.dot(foo, \"bar\", \"baz\")` performs a special kind\r\n// of `foo.bar.baz` that allows safe indexing of `null` and\r\n// indexing of functions (which calls the function).  If the\r\n// result is a function, it is always a bound function (e.g.\r\n// a wrapped version of `baz` that always uses `foo.bar` as\r\n// `this`).\r\n//\r\n// In `Spacebars.dot(foo, \"bar\")`, `foo` is assumed to be either\r\n// a non-function value or a \"fully-bound\" function wrapping a value,\r\n// where fully-bound means it takes no arguments and ignores `this`.\r\n//\r\n// `Spacebars.dot(foo, \"bar\")` performs the following steps:\r\n//\r\n// * If `foo` is falsy, return `foo`.\r\n//\r\n// * If `foo` is a function, call it (set `foo` to `foo()`).\r\n//\r\n// * If `foo` is falsy now, return `foo`.\r\n//\r\n// * Return `foo.bar`, binding it to `foo` if it's a function.\r\nSpacebars.dot = function (value, id1/*, id2, ...*/) {\r\n  if (arguments.length > 2) {\r\n    // Note: doing this recursively is probably less efficient than\r\n    // doing it in an iterative loop.\r\n    var argsForRecurse = [];\r\n    argsForRecurse.push(Spacebars.dot(value, id1));\r\n    argsForRecurse.push.apply(argsForRecurse,\r\n                              Array.prototype.slice.call(arguments, 2));\r\n    return Spacebars.dot.apply(null, argsForRecurse);\r\n  }\r\n\r\n  if (typeof value === 'function')\r\n    value = value();\r\n\r\n  if (! value)\r\n    return value; // falsy, don't index, pass through\r\n\r\n  var result = value[id1];\r\n  if (typeof result !== 'function')\r\n    return result;\r\n  // `value[id1]` (or `value()[id1]`) is a function.\r\n  // Bind it so that when called, `value` will be placed in `this`.\r\n  return function (/*arguments*/) {\r\n    return result.apply(value, arguments);\r\n  };\r\n};\r\n\r\n// Implement Spacebars's #with, which renders its else case (or nothing)\r\n// if the argument is falsy.\r\nSpacebars.With = function (argFunc, contentBlock, elseContentBlock) {\r\n  return UI.Component.extend({\r\n    init: function () {\r\n      this.v = UI.emboxValue(argFunc, UI.safeEquals);\r\n    },\r\n    render: function () {\r\n      return UI.If(this.v, UI.With(this.v, contentBlock), elseContentBlock);\r\n    },\r\n    materialized: (function () {\r\n      var f = function () {\r\n        var self = this;\r\n        if (Deps.active) {\r\n          Deps.onInvalidate(function () {\r\n            self.v.stop();\r\n          });\r\n        }\r\n      };\r\n      f.isWith = true;\r\n      return f;\r\n    })()\r\n  });\r\n};\r\n\r\nSpacebars.TemplateWith = function (argFunc, contentBlock) {\r\n  var w = UI.With(argFunc, contentBlock);\r\n  w.__isTemplateWith = true;\r\n  return w;\r\n};\r\n"]}