{"version":3,"file":"\\packages\\accounts-google.js","sources":["accounts-google/google.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,yC;;AAEA,sB;AACA,wD;AACA,yC;AACA,sD;AACA,yB;AACA,qB;AACA,K;;AAEA,sG;AACA,yE;AACA,I;AACA,Q;AACA,iC;AACA,2B;AACA,sE;AACA,mC;AACA,gF;AACA,uD;AACA,mG;AACA,qE;;AAEA,yB;AACA,+D;AACA,qC;AACA,qE;AACA,oE;AACA,K;AACA,C","sourcesContent":["Accounts.oauth.registerService('google');\r\n\r\nif (Meteor.isClient) {\r\n  Meteor.loginWithGoogle = function(options, callback) {\r\n    // support a callback without options\r\n    if (! callback && typeof options === \"function\") {\r\n      callback = options;\r\n      options = null;\r\n    }\r\n\r\n    var credentialRequestCompleteCallback = Accounts.oauth.credentialRequestCompleteHandler(callback);\r\n    Google.requestCredential(options, credentialRequestCompleteCallback);\r\n  };\r\n} else {\r\n  Accounts.addAutopublishFields({\r\n    forLoggedInUser: _.map(\r\n      // publish access token since it can be used from the client (if\r\n      // transmitted over ssl or on\r\n      // localhost). https://developers.google.com/accounts/docs/OAuth2UserAgent\r\n      // refresh token probably shouldn't be sent down.\r\n      Google.whitelistedFields.concat(['accessToken', 'expiresAt']), // don't publish refresh token\r\n      function (subfield) { return 'services.google.' + subfield; }),\r\n\r\n    forOtherUsers: _.map(\r\n      // even with autopublish, no legitimate web app should be\r\n      // publishing all users' emails\r\n      _.without(Google.whitelistedFields, 'email', 'verified_email'),\r\n      function (subfield) { return 'services.google.' + subfield; })\r\n  });\r\n}\r\n"]}