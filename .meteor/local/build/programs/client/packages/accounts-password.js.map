)]}'
{"version":3,"file":"\\packages\\accounts-password.js","sources":["accounts-password/password_client.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qC;AACA,E;AACA,wD;AACA,6B;AACA,uB;AACA,sE;AACA,uB;AACA,2B;AACA,8C;AACA,oE;AACA,qC;AACA,oC;;AAEA,mC;AACA,qC;AACA,sC;AACA,Q;AACA,mC;;AAEA,0B;;AAEA,4D;AACA,0E;AACA,4E;AACA,4D;AACA,+B;AACA,4B;AACA,kE;AACA,6B;AACA,sC;AACA,wB;AACA,oE;AACA,oC;AACA,e;AACA,O;;AAEA,oD;AACA,gC;AACA,2C;AACA,2C;AACA,2D;AACA,mD;AACA,U;AACA,iC;AACA,O;AACA,E;;;AAGA,mC;AACA,oD;AACA,2D;;AAEA,wB;AACA,iD;AACA,wD;AACA,2D;AACA,0B;AACA,yB;;AAEA,4B;AACA,6B;AACA,+B;AACA,0B;AACA,K;AACA,E;;;;AAIA,sC;AACA,E;AACA,sE;AACA,qE;AACA,qE;AACA,8B;AACA,8C;AACA,yE;AACA,uB;AACA,6E;AACA,W;AACA,G;;AAEA,mD;;AAEA,qB;AACA,8B;AACA,qE;AACA,+B;AACA,+B;AACA,kE;AACA,gB;AACA,iC;AACA,S;AACA,S;AACA,yB;AACA,0C;AACA,sC;AACA,2C;AACA,8B;AACA,oE;AACA,+B;AACA,+B;AACA,gF;AACA,iB;AACA,S;;AAEA,sD;AACA,gC;AACA,kC;AACA,iE;AACA,mC;AACA,mC;AACA,sE;AACA,oB;AACA,oD;AACA,mC;AACA,2B;AACA,2E;AACA,sB;AACA,uC;AACA,e;AACA,a;AACA,a;AACA,S;AACA,G;AACA,E;;AAEA,iE;AACA,iB;AACA,E;AACA,0B;AACA,qB;AACA,yD;AACA,uD;AACA,qB;AACA,+C;AACA,gE;AACA,E;;AAEA,2D;AACA,+D;AACA,E;AACA,wB;AACA,8B;AACA,yD;AACA,iE;AACA,a;AACA,0C;AACA,mB;AACA,gD;;AAEA,mD;AACA,4B;AACA,gC;AACA,uC;AACA,6B;AACA,E;;AAEA,8D;AACA,4C;AACA,E;AACA,wB;AACA,yD;AACA,kD;AACA,a;AACA,0C;;AAEA,4B;AACA,8B;AACA,6B;AACA,6B;AACA,E","sourcesContent":["// Attempt to log in with a password.\r\n//\r\n// @param selector {String|Object} One of the following:\r\n//   - {username: (username)}\r\n//   - {email: (email)}\r\n//   - a string which may be a username or email, depending on whether\r\n//     it contains \"@\".\r\n// @param password {String}\r\n// @param callback {Function(error|undefined)}\r\nMeteor.loginWithPassword = function (selector, password, callback) {\r\n  var srp = new SRP.Client(password);\r\n  var request = srp.startExchange();\r\n\r\n  if (typeof selector === 'string')\r\n    if (selector.indexOf('@') === -1)\r\n      selector = {username: selector};\r\n    else\r\n      selector = {email: selector};\r\n\r\n  request.user = selector;\r\n\r\n  // Normally, we only set Meteor.loggingIn() to true within\r\n  // Accounts.callLoginMethod, but we'd also like it to be true during the\r\n  // password exchange. So we set it to true here, and clear it on error; in\r\n  // the non-error case, it gets cleared by callLoginMethod.\r\n  Accounts._setLoggingIn(true);\r\n  Accounts.connection.apply(\r\n    'beginPasswordExchange', [request], function (error, result) {\r\n      if (error || !result) {\r\n        Accounts._setLoggingIn(false);\r\n        error = error ||\r\n          new Error(\"No result from call to beginPasswordExchange\");\r\n        callback && callback(error);\r\n        return;\r\n      }\r\n\r\n      var response = srp.respondToChallenge(result);\r\n      Accounts.callLoginMethod({\r\n        methodArguments: [{srp: response}],\r\n        validateResult: function (result) {\r\n          if (!srp.verifyConfirmation({HAMK: result.HAMK}))\r\n            throw new Error(\"Server is cheating!\");\r\n        },\r\n        userCallback: callback});\r\n    });\r\n};\r\n\r\n\r\n// Attempt to log in as a new user.\r\nAccounts.createUser = function (options, callback) {\r\n  options = _.clone(options); // we'll be modifying options\r\n\r\n  if (!options.password)\r\n    throw new Error(\"Must set options.password\");\r\n  var verifier = SRP.generateVerifier(options.password);\r\n  // strip old password, replacing with the verifier object\r\n  delete options.password;\r\n  options.srp = verifier;\r\n\r\n  Accounts.callLoginMethod({\r\n    methodName: 'createUser',\r\n    methodArguments: [options],\r\n    userCallback: callback\r\n  });\r\n};\r\n\r\n\r\n\r\n// Change password. Must be logged in.\r\n//\r\n// @param oldPassword {String|null} By default servers no longer allow\r\n//   changing password without the old password, but they could so we\r\n//   support passing no password to the server and letting it decide.\r\n// @param newPassword {String}\r\n// @param callback {Function(error|undefined)}\r\nAccounts.changePassword = function (oldPassword, newPassword, callback) {\r\n  if (!Meteor.user()) {\r\n    callback && callback(new Error(\"Must be logged in to change password.\"));\r\n    return;\r\n  }\r\n\r\n  var verifier = SRP.generateVerifier(newPassword);\r\n\r\n  if (!oldPassword) {\r\n    Accounts.connection.apply(\r\n      'changePassword', [{srp: verifier}], function (error, result) {\r\n        if (error || !result) {\r\n          callback && callback(\r\n            error || new Error(\"No result from changePassword.\"));\r\n        } else {\r\n          callback && callback();\r\n        }\r\n      });\r\n  } else { // oldPassword\r\n    var srp = new SRP.Client(oldPassword);\r\n    var request = srp.startExchange();\r\n    request.user = {id: Meteor.user()._id};\r\n    Accounts.connection.apply(\r\n      'beginPasswordExchange', [request], function (error, result) {\r\n        if (error || !result) {\r\n          callback && callback(\r\n            error || new Error(\"No result from call to beginPasswordExchange\"));\r\n          return;\r\n        }\r\n\r\n        var response = srp.respondToChallenge(result);\r\n        response.srp = verifier;\r\n        Accounts.connection.apply(\r\n          'changePassword', [response],function (error, result) {\r\n            if (error || !result) {\r\n              callback && callback(\r\n                error || new Error(\"No result from changePassword.\"));\r\n            } else {\r\n              if (!srp.verifyConfirmation(result)) {\r\n                // Monkey business!\r\n                callback &&\r\n                  callback(new Error(\"Old password verification failed.\"));\r\n              } else {\r\n                callback && callback();\r\n              }\r\n            }\r\n          });\r\n      });\r\n  }\r\n};\r\n\r\n// Sends an email to a user with a link that can be used to reset\r\n// their password\r\n//\r\n// @param options {Object}\r\n//   - email: (email)\r\n// @param callback (optional) {Function(error|undefined)}\r\nAccounts.forgotPassword = function(options, callback) {\r\n  if (!options.email)\r\n    throw new Error(\"Must pass options.email\");\r\n  Accounts.connection.call(\"forgotPassword\", options, callback);\r\n};\r\n\r\n// Resets a password based on a token originally created by\r\n// Accounts.forgotPassword, and then logs in the matching user.\r\n//\r\n// @param token {String}\r\n// @param newPassword {String}\r\n// @param callback (optional) {Function(error|undefined)}\r\nAccounts.resetPassword = function(token, newPassword, callback) {\r\n  if (!token)\r\n    throw new Error(\"Need to pass token\");\r\n  if (!newPassword)\r\n    throw new Error(\"Need to pass newPassword\");\r\n\r\n  var verifier = SRP.generateVerifier(newPassword);\r\n  Accounts.callLoginMethod({\r\n    methodName: 'resetPassword',\r\n    methodArguments: [token, verifier],\r\n    userCallback: callback});\r\n};\r\n\r\n// Verifies a user's email address based on a token originally\r\n// created by Accounts.sendVerificationEmail\r\n//\r\n// @param token {String}\r\n// @param callback (optional) {Function(error|undefined)}\r\nAccounts.verifyEmail = function(token, callback) {\r\n  if (!token)\r\n    throw new Error(\"Need to pass token\");\r\n\r\n  Accounts.callLoginMethod({\r\n    methodName: 'verifyEmail',\r\n    methodArguments: [token],\r\n    userCallback: callback});\r\n};\r\n"]}