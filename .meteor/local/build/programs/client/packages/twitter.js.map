)]}'
{"version":3,"file":"\\packages\\twitter.js","sources":["twitter/twitter_configure.html","twitter/twitter_configure.js","twitter/twitter_client.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,0E;AACA,kB;AACA,sB;AACA,uU;AACA,kB;AACA,iB;AACA,sD;AACA,mV;AACA,I;;;;;;;;;;;;;;;;;;;ACTA,sE;AACA,yD;AACA,sD;AACA,E;;AAEA,qE;AACA,U;AACA,gD;AACA,6C;AACA,I;AACA,E;;;;;;;;;;;;;;;;;;;ACVA,a;;AAEA,2C;AACA,oE;AACA,mF;AACA,4E;AACA,W;AACA,mF;AACA,qD;AACA,4E;AACA,gD;AACA,iB;AACA,G;;AAEA,iF;AACA,gB;AACA,2E;AACA,8C;AACA,W;AACA,G;;AAEA,wC;AACA,gF;AACA,uF;AACA,yB;;AAEA,gD;AACA,qD;AACA,gE;AACA,sC;;AAEA,kB;AACA,a;AACA,oE;AACA,I;AACA,E","sourcesContent":["\nTemplate.__define__(\"configureLoginServiceDialogForTwitter\", (function() {\n  var self = this;\n  var template = this;\n  return [ HTML.Raw(\"<p>\\n    First, you'll need to register your app on Twitter. Follow these steps:\\n  </p>\\n  \"), HTML.OL(HTML.Raw('\\n    <li>\\n      Visit <a href=\"https://dev.twitter.com/apps/new\" target=\"_blank\">https://dev.twitter.com/apps/new</a>\\n    </li>\\n    '), HTML.LI(\"\\n      Set Callback URL to: \", HTML.SPAN({\n    \"class\": \"url\"\n  }, function() {\n    return Spacebars.mustache(self.lookup(\"siteUrl\"));\n  }, \"_oauth/twitter?close\"), \"\\n    \"), HTML.Raw('\\n    <li>\\n      Select \"Create your Twitter application\".\\n    </li>\\n    <li>\\n      On the Settings tab, enable \"Allow this application to be used to Sign in with Twitter\" and click\\n      \"Update settings\".\\n    </li>\\n    <li>\\n      Switch to the API Keys tab.\\n    </li>\\n  ')) ];\n}));\n","Template.configureLoginServiceDialogForTwitter.siteUrl = function () {\r\n  // Twitter doesn't recognize localhost as a domain name\r\n  return Meteor.absoluteUrl({replaceLocalhost: true});\r\n};\r\n\r\nTemplate.configureLoginServiceDialogForTwitter.fields = function () {\r\n  return [\r\n    {property: 'consumerKey', label: 'API key'},\r\n    {property: 'secret', label: 'API secret'}\r\n  ];\r\n};\r\n","Twitter = {};\r\n\r\n// Request Twitter credentials for the user\r\n// @param options {optional}  XXX support options.requestPermissions\r\n// @param credentialRequestCompleteCallback {Function} Callback function to call on\r\n//   completion. Takes one argument, credentialToken on success, or Error on\r\n//   error.\r\nTwitter.requestCredential = function (options, credentialRequestCompleteCallback) {\r\n  // support both (options, callback) and (callback).\r\n  if (!credentialRequestCompleteCallback && typeof options === 'function') {\r\n    credentialRequestCompleteCallback = options;\r\n    options = {};\r\n  }\r\n\r\n  var config = ServiceConfiguration.configurations.findOne({service: 'twitter'});\r\n  if (!config) {\r\n    credentialRequestCompleteCallback && credentialRequestCompleteCallback(\r\n      new ServiceConfiguration.ConfigError());\r\n    return;\r\n  }\r\n\r\n  var credentialToken = Random.secret();\r\n  // We need to keep credentialToken across the next two 'steps' so we're adding\r\n  // a credentialToken parameter to the url and the callback url that we'll be returned\r\n  // to by oauth provider\r\n\r\n  // url to app, enters \"step 1\" as described in\r\n  // packages/accounts-oauth1-helper/oauth1_server.js\r\n  var loginUrl = '/_oauth/twitter/?requestTokenAndRedirect=true'\r\n        + '&state=' + credentialToken;\r\n\r\n  OAuth.showPopup(\r\n    loginUrl,\r\n    _.bind(credentialRequestCompleteCallback, null, credentialToken)\r\n  );\r\n};\r\n"]}